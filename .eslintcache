[{"/Users/josiahwhite/unicode/ayds2/src/index.js":"1","/Users/josiahwhite/unicode/ayds2/src/App.js":"2","/Users/josiahwhite/unicode/ayds2/src/Pages/Home.js":"3","/Users/josiahwhite/unicode/ayds2/src/Pages/DataStructures.js":"4","/Users/josiahwhite/unicode/ayds2/src/Pages/Algorithms.js":"5","/Users/josiahwhite/unicode/ayds2/src/Pages/datastructures/linkedlist/LinkedList.js":"6","/Users/josiahwhite/unicode/ayds2/src/Pages/Shared.js":"7","/Users/josiahwhite/unicode/ayds2/src/Pages/datastructures/linkedlist/Node.js":"8","/Users/josiahwhite/unicode/ayds2/src/Pages/datastructures/linkedlist/NodeLine.js":"9","/Users/josiahwhite/unicode/ayds2/src/Pages/datastructures/array/ArrayVis.js":"10","/Users/josiahwhite/unicode/ayds2/src/Pages/datastructures/array/ArrayElement.js":"11","/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/binarysearch/BinarySearch.js":"12","/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/binarysearch/ArrayElement.js":"13","/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/quicksort/QuickSort.js":"14","/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/quicksort/ArrayElement.js":"15","/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/bfs/BFS.js":"16","/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/bfs/ArrayElement.js":"17","/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/dijkstra/Dijkstra.js":"18","/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/dijkstra/ArrayElement.js":"19","/Users/josiahwhite/unicode/ayds2/src/serviceWorker.js":"20"},{"size":295,"mtime":1615256330366,"results":"21","hashOfConfig":"22"},{"size":1373,"mtime":1614381625554,"results":"23","hashOfConfig":"22"},{"size":3530,"mtime":1616814432086,"results":"24","hashOfConfig":"22"},{"size":3283,"mtime":1614925003212,"results":"25","hashOfConfig":"22"},{"size":3588,"mtime":1614925003211,"results":"26","hashOfConfig":"22"},{"size":24060,"mtime":1625872925823,"results":"27","hashOfConfig":"22"},{"size":1272,"mtime":1625788698058,"results":"28","hashOfConfig":"22"},{"size":4739,"mtime":1610679264159,"results":"29","hashOfConfig":"30"},{"size":3917,"mtime":1610602849901,"results":"31","hashOfConfig":"30"},{"size":11575,"mtime":1625874573949,"results":"32","hashOfConfig":"22"},{"size":1575,"mtime":1609983066506,"results":"33","hashOfConfig":"22"},{"size":19234,"mtime":1625873649422,"results":"34","hashOfConfig":"22"},{"size":2142,"mtime":1614729370350,"results":"35","hashOfConfig":"22"},{"size":20797,"mtime":1625873395647,"results":"36","hashOfConfig":"22"},{"size":1954,"mtime":1614574848811,"results":"37","hashOfConfig":"22"},{"size":55805,"mtime":1625874560100,"results":"38","hashOfConfig":"22"},{"size":1547,"mtime":1610688793216,"results":"39","hashOfConfig":"22"},{"size":38911,"mtime":1625871764575,"results":"40","hashOfConfig":"22"},{"size":1547,"mtime":1611192124488,"results":"41","hashOfConfig":"30"},{"size":4960,"mtime":1615257573224,"results":"42","hashOfConfig":"22"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"15mqhqv",{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"45"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"45"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1s93m74",{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"45"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"45"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":55,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"45"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"45"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"/Users/josiahwhite/unicode/ayds2/src/index.js",[],["95","96"],"/Users/josiahwhite/unicode/ayds2/src/App.js",["97"],"import \"./App.css\";\n\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport Home from \"./Pages/Home\";\n\n//Main Pages\nimport Algorithms from \"./Pages/Algorithms\";\nimport DataStructures from \"./Pages/DataStructures\";\n\n//Data Structures\nimport LinkedList from \"./Pages/datastructures/linkedlist/LinkedList\";\nimport ArrayVis from \"./Pages/datastructures/array/ArrayVis\";\n\n//Algorithms\nimport BinarySearch from \"./Pages/algorithms/binarysearch/BinarySearch\";\nimport QuickSort from \"./Pages/algorithms/quicksort/QuickSort\";\nimport BFS from \"./Pages/algorithms/bfs/BFS\";\nimport Dijkstra from \"./Pages/algorithms/dijkstra/Dijkstra\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        {/* main pages */}\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/algorithms\" component={Algorithms} />\n        <Route path=\"/datastructures\" component={DataStructures} />\n\n        {/* data structures */}\n        <Route path=\"/linkedlist\" component={LinkedList} />\n        <Route path=\"/array\" component={ArrayVis} />\n\n        {/* algorithms */}\n        <Route path=\"/binarysearch\" component={BinarySearch} />\n        <Route path=\"/quicksort\" component={QuickSort} />\n        <Route path=\"/bfs\" component={BFS} />\n\n        <Route path=\"/dijkstra\" component={Dijkstra} />\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/josiahwhite/unicode/ayds2/src/Pages/Home.js",["98","99"],"import { Link, useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { TopWrapper, media } from \"./Shared\";\n\nimport { ReactComponent as Plus } from \"./homeimages/plus.svg\";\nimport { ReactComponent as QS } from \"./homeimages/qs.svg\";\nimport { ReactComponent as Dijkstra } from \"./homeimages/dijkstra.svg\";\n\nconst HomeWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  background-color: transparent;\n  justify-content: center;\n  align-items: center;\n  overflow-x: hidden;\n`;\n\nconst BodyWrapper = styled.div`\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  background-color: white;\n  flex-grow: 20;\n  align-items: center;\n  justify-content: flex-start;\n\n  ${media.mobile} {\n    justify-content: flex-start;\n    margin-top: 10vh;\n  }\n`;\n\nconst HomeTitle = styled.h1`\n  font-size: 6vh;\n  color: black;\n  padding-left: 5%;\n`;\n\nconst Item = styled.div`\n  min-width: 600px;\n  min-height: 250px;\n  width: 30vw;\n  height: auto;\n  min-height: 30vh;\n  margin: 1vh;\n  border-radius: 4vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  overflow: auto;\n  margin-bottom: 1vh;\n  text-decoration: none;\n  text-align: center;\n  margin-top: 8vh;\n\n  h1 {\n    font-size: calc(6vh + 1vw);\n    font-weight: bolder;\n    color: white;\n    margin-left: 2vw;\n    margin-right: 2vw;\n  }\n  p {\n    font-size: 2vh;\n    font-weight: bolder;\n    color: white;\n    margin-left: 2vw;\n    margin-right: 2vw;\n    margin-bottom: 2vh;\n    margin-top: 2vh;\n    transform: translateY(-30%);\n    text-align: justify;\n    text-justify: inter-word;\n  }\n\n  ${media.mobile} {\n    min-width: 150px;\n    min-height: 100px;\n    width: 90vw;\n    border-radius: 8vh;\n    margin-top: 2vh;\n  }\n`;\n\nconst IconHolder = styled.div`\n  position: absolute;\n\n  animation: bob 3s infinite ease;\n\n  @keyframes bob {\n    0% {\n      transform: translate(0vh, 0vh);\n    }\n    50% {\n      transform: translate(0vh, -2vh);\n    }\n    100% {\n      transform: translate(0vh, 0vh);\n    }\n  }\n\n  #plus {\n    position: absolute;\n    top: 60vh;\n    left: 10vw;\n    width: 15vw;\n  }\n  #dijkstra {\n    position: absolute;\n    top: 20vh;\n    left: 72vw;\n    width: 28vw;\n  }\n  #qs {\n    position: absolute;\n    top: 10vh;\n    left: 9vw;\n    width: 18vw;\n\n    ${media.mobile} {\n      top: -5vh;\n      left: 2vw;\n      width: 30vw;\n    }\n  }\n  ${media.mobile} {\n    display: none;\n  }\n`;\n\nfunction DataStructures(props) {\n  return (\n    <Item\n      BackLink\n      as={Link}\n      to={props.url}\n      style={{ backgroundColor: props.colour }}\n    >\n      <h1>{props.title}</h1>\n\n      <p>{props.description}</p>\n    </Item>\n  );\n}\n\nfunction Algorithms() {\n  return (\n    <Item\n      as={Link}\n      to=\"/algorithms\"\n      style={{ backgroundColor: \"#6DD3CE\", textDecoration: \"none\" }}\n    >\n      <p style={{ paddingLeft: \"10%\" }}>algorithms</p>\n    </Item>\n  );\n}\n\nfunction Home() {\n  return (\n    <HomeWrapper>\n      <TopWrapper>\n        <HomeTitle>adsref.cc</HomeTitle>\n        <IconHolder>\n          <Plus id=\"plus\" />\n          <QS id=\"qs\" />\n          <Dijkstra id=\"dijkstra\" />\n        </IconHolder>\n      </TopWrapper>\n      <BodyWrapper>\n        <DataStructures url=\"/algorithms\" colour=\"#85DEDA\" title=\"algorithms\" />\n        <DataStructures\n          url=\"/datastructures\"\n          colour=\"#8CE278\"\n          title=\"data structures\"\n        />\n      </BodyWrapper>\n    </HomeWrapper>\n  );\n}\n\nexport default Home;\n","/Users/josiahwhite/unicode/ayds2/src/Pages/DataStructures.js",["100"],"import { Link, useHistory } from \"react-router-dom\";\nimport { ReactComponent as BackArrow } from \"./icons/BackArrow.svg\";\nimport styled from \"styled-components\";\nimport { TopWrapper, Title, media, Item } from \"./Shared\";\n\nconst DataStructuresWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  height: 100%;\n  width: 100%;\n  background-color: #61dafb;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst BodyWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  background-color: white;\n  flex-grow: 20;\n  align-items: center;\n  justify-content: space-evenly;\n  overflow-y: auto;\n  overflow-x: hidden;\n`;\n\nconst ItemRow = styled.div`\n  width: 66%;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  overflow: visible;\n\n  justify-content: space-evenly;\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n    width: 80%;\n  }\n`;\n\nconst BackLink = styled.div`\n  /* lets use react link */\n`;\n\nfunction DataType(props) {\n  return (\n    <Item\n      BackLink\n      as={Link}\n      to={props.url}\n      style={{ backgroundColor: props.colour, opacity: props.opacity }}\n    >\n      <h1>{props.title}</h1>\n\n      <p>{props.description}</p>\n    </Item>\n  );\n}\n\nfunction DataStructures() {\n  return (\n    <DataStructuresWrapper>\n      <TopWrapper>\n        <BackLink as={Link} to=\"/\" style={{ paddingLeft: \"2%\" }}>\n          <BackArrow />\n        </BackLink>\n\n        <Title>data structures</Title>\n      </TopWrapper>\n      <BodyWrapper>\n        <ItemRow>\n          <DataType\n            colour=\"#F76146\"\n            title=\"array\"\n            url=\"/array\"\n            description={\n              <div>\n                <p>\n                  \"arrays store elements containing data right next to each\n                  other (contiguously) in computer memory, making them ideal for\n                  storing data you will be accessing regularly \"\n                </p>\n              </div>\n            }\n          />\n          <DataType\n            colour=\"#40B8ED\"\n            opacity=\"0.3\"\n            title=\"vector\"\n            description={\n              <div>\n                <p>\"coming soon... \"</p>\n              </div>\n            }\n          />\n          <DataType\n            colour=\"#7CED61\"\n            url=\"/linkedlist\"\n            title=\"linked list\"\n            description={\n              <div>\n                <p>\n                  \"linked lists store data in nodes that are allocated random\n                  addresses in memory. this means inserting/removing data is\n                  fast, but accessing is slow\"\n                </p>\n              </div>\n            }\n          />\n          <DataType\n            colour=\"#FFA5B2\"\n            title=\"binary tree\"\n            opacity=\"0.5\"\n            description={\n              <div>\n                <p>\"coming soon... \"</p>\n              </div>\n            }\n          />\n          <DataType\n            colour=\"#FFE26A\"\n            opacity=\"0.5\"\n            title=\"red black tree\"\n            description={\n              <div>\n                <p>\"coming soon... \"</p>\n              </div>\n            }\n          />\n        </ItemRow>\n      </BodyWrapper>\n    </DataStructuresWrapper>\n  );\n}\n\nexport default DataStructures;\n","/Users/josiahwhite/unicode/ayds2/src/Pages/Algorithms.js",["101"],"import { Link, useHistory } from \"react-router-dom\";\nimport { ReactComponent as BackArrow } from \"./icons/BackArrow.svg\";\nimport styled from \"styled-components\";\nimport { TopWrapper, Title, media, Item } from \"./Shared\";\n\nconst AlgorithmsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  height: 100%;\n  width: 100%;\n  background-color: #61dafb;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst BodyWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  background-color: white;\n  flex-grow: 20;\n  align-items: center;\n  justify-content: space-evenly;\n  overflow-y: auto;\n  overflow-x: hidden;\n`;\n\nconst ItemRow = styled.div`\n  width: 66%;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  overflow: visible;\n\n  justify-content: space-evenly;\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n    width: 80%;\n  }\n`;\n\nconst BackLink = styled.div`\n  /* lets use react link */\n  padding-left: 2%;\n`;\n\nfunction DataType(props) {\n  return (\n    <Item\n      BackLink\n      as={Link}\n      to={props.url}\n      style={{ backgroundColor: props.colour, opacity: props.opacity }}\n    >\n      <h1>{props.title}</h1>\n\n      <p>{props.description}</p>\n    </Item>\n  );\n}\n\nfunction Algorithms() {\n  return (\n    <AlgorithmsWrapper>\n      <TopWrapper>\n        <BackLink as={Link} to=\"/\">\n          <BackArrow />\n        </BackLink>\n\n        <Title>algorithms</Title>\n      </TopWrapper>\n      <BodyWrapper>\n        <ItemRow>\n          <DataType\n            url=\"/binarysearch\"\n            colour=\"#7CED61\"\n            title=\"binary search\"\n            description={\n              <div>\n                <p>\n                  a simple searching algorithm for arrays to find a given\n                  element\n                </p>\n              </div>\n            }\n          />\n\n          <DataType\n            url=\"/quicksort\"\n            colour=\"#D586F8\"\n            title=\"quick sort\"\n            description={\n              <div>\n                <p>\n                  an efficient sorting algorithm for arrays to order elements\n                  from low to high\n                </p>\n              </div>\n            }\n          />\n          <DataType\n            url=\"/dijkstra\"\n            colour=\"#6BEBD8\"\n            title=\"dijkstra's algorithm\"\n            description={\n              <div>\n                <p>\n                  an efficient algorithm for finding the shortest path between\n                  nodes when the distances between them are known\n                </p>\n              </div>\n            }\n          />\n          <DataType\n            url=\"/bfs\"\n            colour=\"#FFE26A\"\n            title=\"BFS\"\n            description={\n              <div>\n                <p>\n                  an efficient algorithm for finding the shortest path between\n                  nodes when the distances between them aren't specified\n                </p>\n              </div>\n            }\n          />\n          <DataType\n            colour=\"#40B8ED\"\n            title=\"bubble sort\"\n            opacity=\"0.3\"\n            description={\n              <div>\n                <p>coming soon... </p>\n              </div>\n            }\n          />\n          <DataType\n            colour=\"#FFA5B2\"\n            title=\"bucket sort\"\n            opacity=\"0.5\"\n            description={\n              <div>\n                <p>coming soon... </p>\n              </div>\n            }\n          />\n        </ItemRow>\n      </BodyWrapper>\n    </AlgorithmsWrapper>\n  );\n}\n\nexport default Algorithms;\n","/Users/josiahwhite/unicode/ayds2/src/Pages/datastructures/linkedlist/LinkedList.js",["102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120"],"import React, { useEffect, useRef, useState } from \"react\";\nimport Sketch from \"react-p5\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { ReactComponent as BackArrow } from \"../../icons/BackArrow.svg\";\nimport { Item, media, Title, TopWrapper } from \"../../Shared\";\n\nconst AlgorithmsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  height: auto;\n  width: 100%;\n  background-color: #61dafb;\n  justify-content: center;\n  align-items: center;\n  overflow-x: scroll;\n\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nconst BodyWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  background-color: white;\n  flex-grow: 20;\n  align-items: flex-start;\n  justify-content: space-evenly;\n  overflow-y: visible;\n  overflow-x: hidden;\n\n  ${media.mobile} {\n    flex-direction: column-reverse;\n    justify-content: center;\n    align-items: flex-end;\n  }\n`;\n\nconst ItemRowDescription = styled.div`\n  width: 66%;\n  background-color: transparent;\n  display: grid;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-items: center;\n  height: auto;\n  margin-left: 10%;\n  width: 100vw;\n  overflow: visible;\n\n  justify-content: space-evenly;\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    margin: 0%;\n  }\n`;\n\nconst ItemRowContent = styled.div`\n  background-color: transparent;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  justify-content: center;\n  align-items: flex-start;\n\n  margin-right: 10%;\n  min-width: 40vw;\n  max-width: 40vw;\n  min-height: 100vh;\n  max-height: 100vh;\n\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n    min-width: 100%;\n\n    min-height: 47vh;\n    margin-top: \"30vh\";\n    margin: 0%;\n  }\n`;\n\nconst InputValue = styled.input`\n  border: 0;\n  background-color: #e8e8e8;\n\n  border-radius: 4vh;\n  text-align: center;\n  font-size: 4vh;\n  padding: 2vh;\n  min-width: 15vw;\n  max-width: 15vw;\n  font-weight: bold;\n  color: #535353;\n  outline: none;\n\n  ${media.mobile} {\n    max-width: none;\n    border-radius: 2vh;\n    width: 10vh;\n    height: 2vh;\n\n    font-size: 3vh;\n  }\n`;\n\nconst AddButton = styled.div`\n  display: flex;\n  width: 10vh;\n  height: 10vh;\n  background-color: #78fc59;\n  border-radius: 4vh;\n  align-items: center;\n  justify-content: center;\n\n  p {\n    font-weight: bold;\n    color: white;\n    font-size: 7vh;\n  }\n\n  ${media.mobile} {\n    border-radius: 2vh;\n    width: 6vh;\n    height: 6vh;\n    margin-top: 0vh;\n\n    p {\n      font-size: 5vh;\n    }\n  }\n`;\n\nconst MinusButton = styled.div`\n  display: flex;\n  width: 10vh;\n  height: 10vh;\n  background-color: #f06449;\n  border-radius: 4vh;\n  align-self: center;\n  align-items: center;\n\n  justify-content: center;\n\n  p {\n    font-weight: bold;\n    color: white;\n    font-size: 7vh;\n  }\n\n  ${media.mobile} {\n    border-radius: 2vh;\n    width: 6vh;\n    height: 6vh;\n    margin-top: 0vh;\n    p {\n      font-size: 5vh;\n    }\n  }\n`;\n\nconst BackLink = styled.div`\n  /* lets use react link */\n  padding-left: 2%;\n`;\n\nconst TextInsert = styled.input`\n  font-size: 5vh;\n  width: 8vh;\n\n  text-align: center;\n  font-weight: bolder;\n  background: none;\n  border: none;\n\n  color: #ffffff;\n  ::placeholder {\n    color: white;\n  }\n\n  outline: none;\n`;\n\nconst SketchHolder = styled.div`\n  min-width: 40vw;\n  max-width: 40vw;\n  min-height: 60vh;\n  max-height: 60vh;\n  background-color: transparent;\n\n  ${media.mobile} {\n    min-width: 100vw;\n    max-width: 100vw;\n    max-height: 40vh;\n    min-height: 40vh;\n  }\n`;\n\nconst ControlHolder = styled.div`\n  display: grid;\n  grid-template-columns: 3fr 1fr 1fr;\n  grid-auto-rows: 1fr;\n  position: relative;\n  height: 12vh;\n  margin-bottom: 2vh;\n  align-items: center;\n  justify-content: center;\n  justify-items: center;\n\n  z-index: 0;\n  margin-top: 2vh;\n  background-color: transparent;\n  border-radius: 2vh;\n  ${media.mobile} {\n    height: 7vh;\n    width: 100%;\n    margin-bottom: 0vh;\n  }\n`;\n\nconst StaticPosition = styled.div`\n  position: fixed;\n  ${media.mobile} {\n    margin-top: inherit;\n    position: relative;\n  }\n`;\n\nfunction Info(props) {\n  return (\n    <Item style={{ backgroundColor: props.colour }}>\n      <h1>{props.title}</h1>\n\n      <p>{props.description}</p>\n    </Item>\n  );\n}\n\nfunction BFS() {\n  const holderRef = useRef();\n  const screenRef = useRef();\n  //Frame\n  const [globalWidth, setGlobalWidth] = useState(0);\n  const [globalHeight, setGlobalHeight] = useState(0);\n\n  //Nodes\n  const [nodeLink, setNodeLink] = useState([]);\n  const [nodeValue, setNodeValue] = useState(37);\n  const [nodeID, setNodeID] = useState(0);\n  const [nodeNext, setNodeNext] = useState(null);\n  const [nodeX, setNodeX] = useState(200);\n  const [nodeY, setNodeY] = useState(200);\n  const [looper, setLooper] = useState(0);\n  const [changer, setChanger] = useState(0);\n  const [isRendered, setIsRendered] = useState(0);\n\n  //let frameWidth = holderRef.current.getBoundingClientRect().width;\n  //let frameHeight = holderRef.current.getBoundingClientRect().height;\n\n  const [frameWidth, setFrameWidth] = useState(0);\n  const [frameHeight, setFrameHeight] = useState(0);\n\n  const a = useEffect(() => {\n    if (holderRef.current.getBoundingClientRect().width > 0) {\n      setFrameWidth(holderRef.current.getBoundingClientRect().width);\n      setFrameHeight(holderRef.current.getBoundingClientRect().height);\n\n      for (let i = 0; i < nodeLink.length; i++) {\n        nodeLink[i].r = (frameHeight + frameWidth) / 15;\n      }\n    }\n  }, [holderRef.current, isRendered]);\n\n  const createNodes = useEffect(() => {\n    if (looper < 3) {\n      var Node = {\n        x: nodeX,\n        y: nodeY,\n        value: nodeValue,\n        id: nodeID,\n        r: (frameHeight + frameWidth) / 15,\n        next: null,\n        colour: \"#72ff98\",\n        bgColour: \"#9bffb6\",\n      };\n\n      setNodeLink([...nodeLink, Node]);\n\n      if (looper < 2) {\n        setChanger(changer + 1);\n      }\n    }\n  }, [looper]);\n\n  const updateValues = useEffect(() => {\n    if (nodeLink.length <= 3) {\n      setNodeValue(Math.floor(Math.random() * 99));\n    }\n    if (looper % 2 != 0) {\n      setNodeX(nodeX + globalWidth / 10);\n    } else {\n      setNodeX(nodeX - globalWidth / 10);\n    }\n    setNodeY(nodeY + globalHeight / 8);\n    setNodeID(nodeID + 1);\n\n    setLooper(looper + 1);\n  }, [changer]);\n\n  const setNexts = useEffect(() => {\n    if (looper > 2) {\n      let temp = [...nodeLink];\n\n      for (let j = 0; j < nodeLink.length - 1; j++) {\n        temp[j].next = temp[j + 1];\n      }\n\n      setNodeLink(temp);\n    }\n  }, [looper]);\n\n  console.log(nodeLink);\n\n  function setup(p5, canvasParentRef) {\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\n    setGlobalWidth(frameWidth);\n    setGlobalHeight(frameHeight);\n\n    p5.createCanvas(frameWidth, frameHeight).parent(canvasParentRef);\n\n    //Finding node closest to center;\n    setIsRendered(1);\n  }\n\n  const fixPositions = useEffect(() => {}, [isRendered]);\n\n  function test() {}\n\n  function windowResized(p5) {\n    /*\n    //Just fix holderref properties pls\n    if (holderRef.current.getBoundingClientRect().width > 1000) {\n      p5.resizeCanvas(\n        holderRef.current.getBoundingClientRect().width,\n        holderRef.current.getBoundingClientRect().height * 0.8\n      );\n      p5.resizeCanvas(\n        holderRef.getBoundingClientRect().width,\n        holderRef.current.getBoundingClientRect().height * 0.8\n      );\n    } else {\n    }*/\n\n    p5.resizeCanvas(\n      holderRef.current.getBoundingClientRect().width,\n      holderRef.current.getBoundingClientRect().height\n    );\n\n    for (let i = 0; i < nodeLink.length; i++) {\n      nodeLink[i].r =\n        (holderRef.current.getBoundingClientRect().height +\n          holderRef.current.getBoundingClientRect().width) /\n        15;\n    }\n\n    setGlobalHeight(p5.windowHeight);\n    console.log(\"resize\");\n  }\n\n  let draw = (p5) => {\n    p5.clear();\n    p5.noStroke();\n\n    if (isRendered == 1) {\n      let newXY = [...nodeLink];\n      let currX = frameWidth / 2;\n      let currY = (frameHeight * 0.8) / 8;\n\n      for (let i = 0; i < nodeLink.length; i++) {\n        nodeLink[i].x = currX;\n        nodeLink[i].y = currY;\n        nodeLink[i].r = (frameHeight + frameWidth) / 15;\n\n        if (i % 2 == 0) {\n          currX -= frameWidth / 10;\n          setNodeX(currX);\n          console.log(\"Even!\");\n        } else {\n          currX += frameWidth / 10;\n          console.log(\"Odd!\");\n          setNodeX(currX);\n        }\n\n        currY += frameHeight / 8;\n        setNodeY(currY);\n      }\n      setIsRendered(2);\n    }\n\n    for (let i = 0; i < nodeLink.length; i++) {\n      //Background Circle\n      p5.fill(p5.color(nodeLink[i].bgColour));\n      p5.ellipse(\n        nodeLink[i].x + nodeLink[i].r / 6,\n        nodeLink[i].y,\n        nodeLink[i].r,\n        nodeLink[i].r\n      );\n\n      //Foreground line\n      if (nodeLink[i].next) {\n        p5.strokeWeight(20);\n        p5.stroke(\"#72ff98\");\n        p5.line(\n          nodeLink[i].x,\n          nodeLink[i].y,\n          nodeLink[i].next.x,\n          nodeLink[i].next.y\n        );\n      }\n      p5.noStroke();\n\n      //Background line\n      if (nodeLink[i].next) {\n        p5.strokeWeight(20);\n        p5.stroke(\"#9bffb6\");\n        p5.line(\n          nodeLink[i].x + nodeLink[i].next.r / 6,\n          nodeLink[i].y,\n          nodeLink[i].next.x + nodeLink[i].next.r / 6,\n          nodeLink[i].next.y\n        );\n      }\n      p5.noStroke();\n\n      //Foreground Circle\n      p5.fill(p5.color(nodeLink[i].colour));\n      p5.ellipse(nodeLink[i].x, nodeLink[i].y, nodeLink[i].r, nodeLink[i].r);\n\n      p5.textSize(nodeLink[i].r / 2);\n      p5.fill(p5.color(\"white\")).text(\n        nodeLink[i].value,\n        nodeLink[i].x - nodeLink[i].r / 4,\n        nodeLink[i].y + nodeLink[i].r / 6\n      );\n      p5.fill(p5.color(\"#72ff98\"));\n    }\n  };\n\n  function addNode() {\n    console.log(nodeLink.length);\n    var Node = {\n      x: nodeX,\n      y: nodeY,\n      value: nodeValue,\n      id: nodeID,\n      r: (frameHeight + frameWidth) / 15,\n      next: null,\n      colour: \"#72ff98\",\n      bgColour: \"#9bffb6\",\n    };\n\n    setNodeLink([...nodeLink, Node]);\n    setChanger(changer + 1);\n  }\n\n  async function removeNode() {\n    let temp = [...nodeLink];\n    let newTemp;\n\n    console.log(\"nodeValue: \", nodeValue);\n    console.log(\"==\", nodeValue == nodeLink[1].value);\n\n    for (let i = 0; i < temp.length; i++) {\n      nodeLink[i].colour = \"#CB391E\";\n      nodeLink[i].bgColour = \"#DD4125\";\n      await sleep(1000);\n      nodeLink[i].colour = \"#72ff98\";\n      nodeLink[i].bgColour = \"#9bffb6\";\n\n      if (temp[i].value == nodeValue) {\n        nodeLink[i].colour = \"#BE57FF\";\n        nodeLink[i].bgColour = \"#AD2CFF\";\n        await sleep(1000);\n        if (i > 0) {\n          temp[i - 1].next = temp[i + 1];\n        }\n\n        for (let j = temp.length - 1; j > i; j--) {\n          temp[j].x = temp[j - 1].x;\n          temp[j].y = temp[j - 1].y;\n        }\n\n        temp.splice(i, 1);\n        setNodeLink(temp);\n        console.log(\"Index: \", i);\n        setNodeY(nodeY - globalHeight / 8);\n        //do nodex\n        break;\n      }\n    }\n  }\n\n  function sleep(ms) {\n    console.log(ms);\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  function mouseWheel(event) {\n    //console.log(event);\n\n    //console.log(window.innerWidth);\n\n    if (event.mouseX > 0 && event.mouseY > 0) {\n      for (let m = 0; m < nodeLink.length; m++) {\n        nodeLink[m].y += event._mouseWheelDeltaY / 8;\n        nodeLink[m].color = \"grey\";\n\n        setNodeY(nodeLink[nodeLink.length - 1].y + globalHeight / 8);\n      }\n    }\n  }\n\n  function mouseDragged(p5) {\n    console.log(p5.mouseY);\n    console.log(frameHeight);\n\n    /*\n    for (let i = 0; i < nodeLink.length; i++) {\n      if (p5.mouseY < mouseCurrentY) {\n        nodeLink[i].y += p5.mouseX / 50;\n      } else {\n        nodeLink[i].y -= p5.mouseX / 50;\n      }\n    }*/\n\n    /* for (let m = 0; m < nodeLink.length; m++) {\n      if (event.mouseY > frameHeight / 4) {\n        nodeLink[m].y += event.mouseY / 80;\n      } else {\n        nodeLink[m].y -= event.mouseY / 80;\n      }\n    }*/\n    console.log(\"TOP: \", document.documentElement.scrollTop);\n\n    if (window.innerWidth > 1000) {\n      if (p5.mouseX > 0 && p5.mouseY > 0) {\n        window.onscroll = function () {\n          document.body.style.overflow = \"hidden\";\n        };\n        for (let i = 0; i < nodeLink.length; i++) {\n          if (p5.mouseY < mouseCurrentY) {\n            nodeLink[i].y += p5.mouseX / 50;\n          } else {\n            nodeLink[i].y -= p5.mouseX / 50;\n          }\n        }\n      }\n    } else {\n      if (p5.mouseY < frameHeight) {\n        window.onscroll = function () {\n          window.scrollTo(0, 0);\n        };\n        for (let i = 0; i < nodeLink.length; i++) {\n          if (p5.mouseY < mouseCurrentY) {\n            nodeLink[i].y += p5.mouseX / 50;\n          } else {\n            nodeLink[i].y -= p5.mouseX / 50;\n          }\n        }\n      }\n    }\n\n    setNodeY(nodeLink[nodeLink.length - 1].y + globalHeight / 8);\n  }\n\n  const [mouseCurrentY, setMouseCurrentY] = useState();\n\n  function mousePressed(p5) {\n    setMouseCurrentY(p5.mouseY);\n  }\n\n  function mouseReleased(p5) {\n    window.onscroll = function () {};\n  }\n\n  return (\n    <AlgorithmsWrapper\n      className=\"BFS\"\n      onLoad={() => console.log(\"Loaded!\")}\n      ref={screenRef}\n    >\n      <TopWrapper>\n        <BackLink as={Link} to=\"/datastructures\">\n          <BackArrow />\n        </BackLink>\n\n        <Title>linked list</Title>\n      </TopWrapper>\n      <BodyWrapper>\n        <ItemRowDescription>\n          <Info\n            colour=\"#F06449\"\n            title=\"linked list\"\n            description={\n              <div>\n                <p style={{ textAlign: \"center\" }}>\n                  linked lists are made up of nodes, which contain data and an\n                  address. the address 'points' to where the next node in the\n                  sequence is in memory. these addresses can be easily changed,\n                  making reording simple.\n                  <br />\n                  <br />\n                  however, this comes at the cost of a greater access cost than\n                  something like an array, as nodes are rarely right next to\n                  each other in memory.\n                </p>\n              </div>\n            }\n          />\n          <Info\n            colour=\"#6DD3CE\"\n            title=\"use cases\"\n            description={\n              <div>\n                <p style={{ textAlign: \"center\" }}>\n                  linked lists are best used in applications where data will\n                  often be inserted or removed, as changing the order of\n                  elements is inexpensive.\n                  <br />\n                  <br />\n                  some web browsers store browser history with a linked list.\n                  this makes sense, as every time a website is visited, new data\n                  would need to be added, or when history is removed, data\n                  removed.\n                  <br />\n                  <br />\n                  essentially, linked lists are useful when storing data is done\n                  more frequently than accessing data\n                </p>\n              </div>\n            }\n          />\n          <Info\n            colour=\"#FFA5B2\"\n            title=\"costs\"\n            description={\n              <div>\n                <p style={{ textAlign: \"center\" }}>\n                  access element: O(n)\n                  <br />\n                  <br />\n                  search: O(n)\n                  <br />\n                  <br />\n                  insert data: O(1)\n                  <br />\n                  <br />\n                  delete data: O(1)\n                </p>\n              </div>\n            }\n          />\n        </ItemRowDescription>\n        <ItemRowContent>\n          <StaticPosition>\n            <SketchHolder id=\"IRC\" ref={holderRef}>\n              {\n                // This fixes the issue of the render paradox\n                //Width of is not known until render, but conditional statement\n                //Forces rerender and fixes issue\n                frameWidth < 1 && (\n                  <Sketch\n                    setup={test}\n                    draw={draw}\n                    windowResized={windowResized}\n                    mouseWheel={mouseWheel}\n                  />\n                )\n              }\n              {frameWidth > 1 && (\n                <Sketch\n                  setup={setup}\n                  draw={draw}\n                  windowResized={windowResized}\n                  mouseWheel={mouseWheel}\n                  mouseDragged={mouseDragged}\n                  mousePressed={mousePressed}\n                  mouseReleased={mouseReleased}\n                />\n              )}\n            </SketchHolder>\n\n            <ControlHolder>\n              <InputValue\n                placeholder=\"value\"\n                onChange={(event) => setNodeValue(event.target.value)}\n              />\n\n              <AddButton onClick={() => addNode()}>\n                <p>+</p>\n              </AddButton>\n              <MinusButton onClick={() => removeNode()}>\n                <p>-</p>\n              </MinusButton>\n            </ControlHolder>\n          </StaticPosition>\n        </ItemRowContent>\n      </BodyWrapper>\n    </AlgorithmsWrapper>\n  );\n}\n\nexport default BFS;\n\n//Old Draw\n/**\n * \n * \n * let draw = (p5) => {\n    p5.background(\"rgb(0%,100%,10%)\");\n    //Color of the ball\n    p5.stroke(255);\n    p5.strokeWeight(4);\n    //Mentioning that the ball or the circle won't have filled color\n    p5.noFill();\n    //The first 2 parameters are for positioning and the next two are\n    //for size\n\n    p5.noStroke();\n    p5.fill(p5.color(\"#9bffb6\"));\n    p5.ellipse(a + 20, b, 100, 100);\n\n    p5.strokeWeight(20);\n    p5.stroke(\"#72ff98\");\n    p5.line(300, 300, 400, 400);\n    p5.noStroke();\n\n    //Circle\n    p5.fill(p5.color(\"#72ff98\"));\n    p5.ellipse(a, b, 100, 100);\n\n    p5.fill(p5.color(\"#9bffb6\"));\n    p5.ellipse(420, 400, 100, 100);\n\n    p5.fill(p5.color(\"#72ff98\"));\n    p5.ellipse(400, 400, 100, 100);\n\n    p5.strokeWeight(20);\n\n    p5.stroke(\"#72ff98\");\n    p5.line(300, 300, 400, 400);\n\n    p5.stroke(\"#9bffb6\");\n    p5.line(320, 300, 420, 400);\n    let easing = 0.05;\n\n    if (b >= 300) {\n      speed = -1 * easing;\n    }\n    if (b === 250) {\n      speed = 1 * easing;\n    }\n    b = b + speed;\n  };\n */\n\n/* Old shit\n\n let setup = (p5, canvasParentRef) => {\n    globalWidth = p5.windowWidth * 0.4;\n    globalHeight = p5.windowHeight * 0.7;\n\n    let parent = p5.createCanvas(globalWidth, globalHeight).parent(\"IRC\");\n\n    p5.background(\"#e3dac9\");\n\n    //No stroke around circle\n    p5.noStroke();\n\n    //Circle ( x, y, width, height)\n    p5.fill(p5.color(\"#72ff98\"));\n    //p5.ellipse(100, 100, 100, 100);\n\n    var xa = 0;\n\n    /* while (xa < 500) {\n      p5.ellipse(xa, 200, 25, 25);\n      xa = xa + 50;\n    }\n\n    for (let i = 0; i < 20; i++) {\n      //p5.ellipse(xa, 200, 100, 100);\n      //xa = xa + 150;\n    }\n\n    async function andrew() {\n      await sleep(1000);\n    }\n\n    console.log(\"length: \" + nodeLink.length);\n\n    for (let j = 0; j < nodeLink.length; j++) {\n      p5.ellipse(nodeLink[j].x, nodeLink[j].y, 100, 100);\n      console.log(\"Width: \" + p5.windowWidth);\n    }\n\n    p5.rect(0, 0, 55, 55, 20);\n    p5.rect(0, globalHeight, 55, 55, 20);\n    p5.rect(globalWidth, 0, 55, 55, 20);\n    p5.rect(globalWidth, globalHeight, 55, 55, 20);\n\n    // tester(p5, x, y);\n  };\n\n  function sleep(ms) {\n    console.log(ms);\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  const [x, setX] = useState(100);\n  const [y, setY] = useState(100);\n  const [nodeID, setNodeID] = useState(0);\n  const [nodeValue, setNodeValue] = useState(27);\n\n  const testarray = [1, 2, 3, 4, 5];\n\n  let draw = (p5) => {};\n\n  function tester(p5, x, y) {\n    console.log(\"CALLED!!!\");\n    // p5.ellipse(x, y, 100, 100);\n  }\n\n  const [spaceVals, setSpaceVals] = useState([]);\n\n  const initialArray = useEffect(() => {\n    setNodeLink([\n      ...nodeLink,\n      {\n        needsNewLine,\n        nodeID,\n        nodeValue,\n        x,\n        y,\n      },\n    ]);\n\n    console.log(nodeID);\n  }, [changer]);\n\n  const run10times = useEffect(() => {\n    if (changer < 9) {\n      //ellipse(x, y, 20, 20);\n\n      setChanger(changer + 1);\n      setNodeValue(nodeValue + 1);\n      setNodeID(nodeID + 1);\n\n      if (x < 100) {\n        setX(x + 100);\n      } else {\n        setX(1000);\n      }\n      setY(Math.floor(Math.random() * 500));\n    }\n  }, [nodeLink]);*/\n\n//Old centering code\n\n/*\n  let centerNode = null;\n    let centerNode2 = null;\n    let closestToZeroX = 0;\n    let closestToZeroY = 0;\n    let a;\n    let b;\n    for (let i = 0; i < nodeLinkHook.length; i++) {\n      a = nodeLinkHook[i].x - globalWidth / 2;\n      b = nodeLinkHook[i].y - (globalHeight * 0.8) / 2;\n      console.log(a);\n\n      if (closestToZeroX === 0) {\n        closestToZeroX = a;\n        centerNode = nodeLinkHook[i];\n      } else if (a > 0 && a <= Math.abs(closestToZeroX)) {\n        closestToZeroX = a;\n        centerNode = nodeLinkHook[i];\n      } else if (a < 0 && -a < Math.abs(closestToZeroX)) {\n        closestToZeroX = a;\n        centerNode = nodeLinkHook[i];\n      }\n\n      if (closestToZeroY === 0) {\n        closestToZeroY = b;\n        centerNode2 = nodeLinkHook[i];\n      } else if (b > 0 && b <= Math.abs(closestToZeroY)) {\n        closestToZeroY = b;\n        centerNode2 = nodeLinkHook[i];\n      } else if (b < 0 && -b < Math.abs(closestToZeroY)) {\n        closestToZeroY = b;\n        centerNode2 = nodeLinkHook[i];\n      }\n    }\n\n\n\n    let centerDecider = null;\n\n    if (centerNode.x + centerNode.y > centerNode2.x + centerNode2.y) {\n      centerDecider = centerNode;\n    } else {\n      centerDecider = centerNode2;\n    }\n\n    console.log(\"Center value: \" + centerNode.nodeValue);\n\n\n      p5.fill(p5.color(\"orange\"));\n    p5.rect(0, 0, 100, 100);\n\n    p5.fill(p5.color(\"white\")).text(centerNode.nodeValue, 0, 50);\n\n    p5.fill(p5.color(\"red\"));\n    p5.ellipse(centerNode.x, centerNode.y, centerNode.r, centerNode.r);\n    p5.fill(p5.color(\"white\")).text(\n      centerNode.nodeValue,\n      centerNode.x - centerNode.r / 4,\n      centerNode.y + centerNode.r / 6\n    );\n\n    p5.fill(p5.color(\"purple\"));\n    p5.ellipse(\n      centerDecider.x,\n      centerDecider.y,\n      centerDecider.r,\n      centerDecider.r\n    );\n    p5.fill(p5.color(\"white\")).text(\n      centerDecider.nodeValue,\n      centerDecider.x - centerDecider.r / 4,\n      centerDecider.y + centerDecider.r / 6\n    );\n\n\n    );*/\n\n//Old Connections\n\n/**\n     * let distance;\n    let smallest = 9999;\n    let nodeToAdd = null;\n    let distanceToAdd = 0;\n    let prevNodes = [];\n    let prevDist = [];\n    let doneBefore = false;\n    //trying dist;\n\n    for (let w = 0; w < numConnections - 1; w++) {\n      smallest = 9999;\n      nodeToAdd = null;\n      doneBefore = false;\n\n      for (let k = 0; k < nodeLinkHook.length; k++) {\n        //Makes sure it is not comparing against itself\n        if (k != nodeIndex) {\n          distance = parseInt(\n            p5.dist(\n              nodeLinkHook[nodeIndex].x,\n              nodeLinkHook[nodeIndex].y,\n              nodeLinkHook[k].x,\n              nodeLinkHook[k].y\n            )\n          );\n\n          //Checks if distance has been done before\n          for (let m = 0; m < prevDist.length; m++) {\n            if (distance == prevDist[m]) {\n              doneBefore = true;\n            }\n          }\n\n          //Sets smallest if not done before\n          if (Math.abs(distance) < smallest && !doneBefore) {\n            smallest = Math.abs(distance);\n            nodeToAdd = nodeLinkHook[k];\n            distanceToAdd = distance;\n          }\n        } else {\n          console.log(\"same\");\n        }\n        //End of loop\n        doneBefore = false;\n      }\n      prevNodes.push(nodeToAdd);\n      prevDist.push(distanceToAdd);\n    }\n\n    return prevNodes;\n     * \n     * \n     * * */\n","/Users/josiahwhite/unicode/ayds2/src/Pages/Shared.js",[],"/Users/josiahwhite/unicode/ayds2/src/Pages/datastructures/linkedlist/Node.js",["121","122","123","124"],"/Users/josiahwhite/unicode/ayds2/src/Pages/datastructures/linkedlist/NodeLine.js",["125","126","127"],"/Users/josiahwhite/unicode/ayds2/src/Pages/datastructures/array/ArrayVis.js",["128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144"],"import { Link, useHistory } from \"react-router-dom\";\nimport { ReactComponent as BackArrow } from \"../../icons/BackArrow.svg\";\nimport styled from \"styled-components\";\nimport { TopWrapper, Title, media, Item } from \"../../Shared\";\nimport ArrayElement from \"./ArrayElement\";\nimport React, { useState, useEffect } from \"react\";\n\nconst AlgorithmsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  /*height: auto;*/\n\n  width: 100%;\n  background-color: #61dafb;\n  justify-content: center;\n  align-items: center;\n\n  s ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nconst BodyWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  background-color: white;\n  flex-grow: 20;\n  align-items: flex-start;\n  justify-content: space-evenly;\n\n  ${media.mobile} {\n    flex-direction: column-reverse;\n    justify-content: center;\n    align-items: flex-end;\n  }\n`;\n\nconst ItemRowDescription = styled.div`\n  width: 66%;\n  background-color: transparent;\n  display: grid;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-items: center;\n\n  height: auto;\n\n  margin-left: 10%;\n  width: 100vw;\n\n  justify-content: space-evenly;\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    margin: 0%;\n  }\n`;\n\nconst ItemRowContent = styled.div`\n  width: 66%;\n  background-color: transparent;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n  height: auto;\n  margin-right: 10%;\n  width: 100vw;\n  margin-top: 10vh;\n\n  justify-content: center;\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n\n    height: 60vh;\n    margin-top: \"30vh\";\n    margin: 0%;\n  }\n`;\n\nconst InputValue = styled.input`\n  border: 0;\n  background-color: #e8e8e8;\n\n  border-radius: 4vh;\n  text-align: center;\n  font-size: 4vh;\n  padding: 2vh;\n  margin-left: 1vw;\n  max-width: 10vw;\n  font-weight: bold;\n  color: #535353;\n  outline: none;\n\n  ${media.mobile} {\n    max-width: none;\n    border-radius: 2vh;\n    width: 10vh;\n    height: 2vh;\n\n    font-size: 3vh;\n  }\n`;\n\nconst AddButton = styled.div`\n  display: flex;\n  width: auto;\n  height: 10vh;\n  background-color: #78fc59;\n  border-radius: 4vh;\n  margin-left: 1vw;\n  margin-right: 1vw;\n  align-items: center;\n  align-self: center;\n  justify-content: center;\n\n  p {\n    font-weight: bold;\n    color: white;\n    font-size: 7vh;\n  }\n\n  ${media.mobile} {\n    height: 6vh;\n\n    p {\n      font-size: 5vh;\n    }\n  }\n`;\n\nconst MinusButton = styled.div`\n  display: flex;\n  width: 10vh;\n  height: 10vh;\n  background-color: #f06449;\n  border-radius: 4vh;\n  margin-top: 2vh;\n  margin-left: 2vh;\n  align-items: center;\n\n  justify-content: center;\n\n  p {\n    font-weight: bold;\n    color: white;\n    font-size: 7vh;\n  }\n\n  ${media.mobile} {\n    border-radius: 2vh;\n    width: 6vh;\n    height: 6vh;\n    margin-top: 0vh;\n    p {\n      font-size: 5vh;\n    }\n  }\n`;\n\nconst ArrayHolder = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  background-color: transparent;\n  height: auto;\n  width: 38vw;\n  padding-top: 2vh;\n\n  align-items: center;\n\n  h1 {\n    color: #535353;\n    font-size: 4vh;\n    font-weight: bold;\n    animation: bob 3s infinite ease;\n  }\n\n  @keyframes bob {\n    0% {\n      transform: translate(0vh, 0vh);\n    }\n    50% {\n      transform: translate(0vh, -2vh);\n    }\n    100% {\n      transform: translate(0vh, 0vh);\n    }\n  }\n\n  ${media.mobile} {\n    justify-content: flex-start;\n    align-items: center;\n    width: 100vw;\n    margin: 0%;\n    height: 49vh;\n    margin-top: \"30vh\";\n  }\n`;\n\nconst ControlHolder = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-auto-rows: 1fr;\n  position: relative;\n  height: 12vh;\n  margin-bottom: 2vh;\n  align-items: center;\n  justify-content: center;\n\n  z-index: 0;\n  margin-top: 2vh;\n  background-color: transparent;\n  border-radius: 2vh;\n  ${media.mobile} {\n    height: 7vh;\n    width: 100%;\n    margin-bottom: 0vh;\n  }\n`;\n\nconst ArrayPosHolder = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-top: 0vh;\n`;\n\nconst BackLink = styled.div`\n  /* lets use react link */\n  padding-left: 2%;\n`;\n\nconst StaticPosition = styled.div`\n  position: fixed;\n  margin-top: 40vh;\n  ${media.mobile} {\n    margin-top: inherit;\n    position: relative;\n  }\n`;\n\nfunction Info(props) {\n  return (\n    <Item style={{ backgroundColor: props.colour }}>\n      <h1>{props.title}</h1>\n\n      <p>{props.description}</p>\n    </Item>\n  );\n}\n\nfunction ArrayVis() {\n  const [arrayLink, setArrayLink] = useState([]);\n  const [positionLink, setPositionLink] = useState([]);\n  const [arrayValue, setArrayValue] = useState(10);\n  const [arrayPosition, setArrayPosition] = useState(0);\n  const [arrayRotation, setArrayRotation] = useState(\"\");\n  const [arrayMovement, setArrayMovement] = useState(\"\");\n  const [indexToChange, setIndexToChange] = useState(null);\n  const [arrayID, setArrayID] = useState(0);\n  const [shouldChange, setShouldChange] = useState(0);\n\n  //For Links Between\n\n  const movementMap = [\n    \"translate(0vh, -4vh) rotate(20deg)\",\n    \"translate(-6vh, -4vh) rotate(-20deg)\",\n    /* \"translate(6vh, -4vh) rotate(-20deg)\",\n    \"translate(5vh, -4vh) rotate(200deg)\",*/\n  ];\n\n  //1 and 3 are the same\n  const arrayMovementMap = [\"translate(5vh, 0vh) \", \" translate(-5vh, 0vh) \"];\n\n  //Will run through 3 possible states\n  const [movementIterator, setMovementIterator] = useState(0);\n  const [transform, setTransform] = useState(movementMap[movementIterator]);\n\n  const [arrayTransform, setArrayTransform] = useState(\n    arrayMovementMap[movementIterator]\n  );\n\n  const [changer, setChanger] = useState(0);\n\n  const initialArray = useEffect(() => {\n    setArrayLink([\n      ...arrayLink,\n      {\n        arrayValue,\n        arrayID,\n      },\n    ]);\n\n    setPositionLink([\n      ...positionLink,\n      {\n        arrayValue,\n        arrayID,\n      },\n    ]);\n\n    setArrayID(arrayID + 1);\n    setMovementIterator(1);\n  }, [changer]);\n\n  const run5times = useEffect(() => {\n    if (changer == 0) {\n      window.scrollTo({ top: 0, behavior: \"smooth\" });\n    }\n    if (changer < 4) {\n      setChanger(changer + 1);\n      setArrayValue(arrayValue + 1);\n    }\n  }, [arrayLink]);\n\n  function handleUpdateElement() {\n    console.log(\"Workin!\");\n    setIndexToChange(\n      //Finds where the ID is the same as the entered position\n      arrayLink.findIndex((array) => array.arrayID == arrayPosition)\n    );\n\n    console.log(\"ID: \" + arrayLink[3].arrayID);\n\n    setShouldChange(shouldChange + 1);\n  }\n\n  const changeArray = useEffect(() => {\n    console.log(\"To change: \" + indexToChange);\n    console.log(\"Position: : \" + arrayPosition);\n    //Stops from accessing undefined\n    //Should change means that it is called whenever button pressed, cause ID can be same as before\n    if (shouldChange > 0 && typeof arrayLink[indexToChange] !== \"undefined\") {\n      handleUpdate(indexToChange);\n    }\n  }, [shouldChange]);\n\n  const handleUpdate = (index) => {\n    let newArrayLink = [...arrayLink];\n    newArrayLink[index].arrayValue = arrayValue;\n    setArrayLink(newArrayLink);\n    //setArrayLink({ ...arrayLink, [array.arrayValue]: arrayValue });\n  };\n\n  return (\n    <AlgorithmsWrapper>\n      <TopWrapper>\n        <BackLink as={Link} to=\"/datastructures\">\n          <BackArrow />\n        </BackLink>\n\n        <Title>array</Title>\n      </TopWrapper>\n      <BodyWrapper>\n        <ItemRowDescription>\n          <Info\n            colour=\"#F06449\"\n            title=\"array\"\n            description={\n              <div>\n                <p>\n                  arrays are a way of storing data. <br />\n                  <br />\n                  they are made up of elements, which can hold a piece of data,\n                  like a number, or even another array. <br />\n                  <br />\n                  elements are stored right next to each other in computer\n                  memory (contiguity), which means going from one element to the\n                  next is extremely fast.\n                  <br />\n                  <br />\n                  however, this also means that inserting/deleting elements\n                  cannot be done, as elements are already right next to each\n                  other.\n                </p>\n              </div>\n            }\n          />\n          <Info\n            colour=\"#6DD3CE\"\n            title=\"use cases\"\n            description={\n              <div>\n                <p>\n                  arrays are best used in applications where data will often be\n                  accessed, as accessing an element is inexpensive.\n                  <br />\n                  <br />\n                  however, this comes at the cost of a greater\n                  insertion/deletion cost than something like a linked list.\n                </p>\n              </div>\n            }\n          />\n          <Info\n            colour=\"#FFA5B2\"\n            title=\"costs\"\n            description={\n              <div>\n                <p>\n                  access element: O(1)\n                  <br />\n                  <br />\n                  search: O(n)\n                  <br />\n                  <br />\n                  insert data: O(n)\n                  <br />\n                  <br />\n                  delete data: O(n)\n                </p>\n              </div>\n            }\n          />\n        </ItemRowDescription>\n        <ItemRowContent>\n          {/*   <Array value={10} />\n          <ArrayLine\n            rotation={\"translate(-2vh, 1vh) rotate(-20deg) \"}\n            movement={\"5vw\"}\n          />\n          <Array value={20} movement={\"5vw\"} />\n          <ArrayLine\n            rotation={\"translate(-3vh, 0vh) rotate(20deg) \"}\n            movement={\"5vw\"}\n          />\n          <Array value={30} movement={\"-5vw\"} />*/}\n          <StaticPosition>\n            <ArrayHolder>\n              <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                <h1>Value:</h1>\n                <ArrayPosHolder>\n                  {arrayLink.map(({ arrayValue, arrayID }) => (\n                    <React.Fragment>\n                      <ArrayElement\n                        value={arrayValue}\n                        id={arrayID}\n                        movement={arrayTransform}\n                      />\n                    </React.Fragment>\n                  ))}\n                </ArrayPosHolder>\n                <h1>Position:</h1>\n                <ArrayPosHolder>\n                  {positionLink.map(({ arrayValue, arrayID }) => (\n                    <React.Fragment>\n                      <ArrayElement\n                        value={arrayID}\n                        id={arrayID}\n                        movement={arrayTransform}\n                      />\n                    </React.Fragment>\n                  ))}\n                </ArrayPosHolder>\n              </div>\n            </ArrayHolder>\n\n            <ControlHolder>\n              <InputValue\n                placeholder=\"value\"\n                onChange={(event) => setArrayValue(event.target.value)}\n              />\n              <InputValue\n                placeholder=\"position\"\n                onChange={(event) => setArrayPosition(event.target.value)}\n              />\n              <AddButton onClick={() => handleUpdateElement()}>\n                <p>+</p>\n              </AddButton>\n            </ControlHolder>\n          </StaticPosition>\n        </ItemRowContent>\n      </BodyWrapper>\n    </AlgorithmsWrapper>\n  );\n}\n\nexport default ArrayVis;\n","/Users/josiahwhite/unicode/ayds2/src/Pages/datastructures/array/ArrayElement.js",[],"/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/binarysearch/BinarySearch.js",["145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169"],"import { Link, useHistory } from \"react-router-dom\";\nimport { ReactComponent as BackArrow } from \"../../icons/BackArrow.svg\";\nimport styled from \"styled-components\";\nimport { TopWrapper, Title, media, Item } from \"../../Shared\";\nimport ArrayElement from \"./ArrayElement\";\nimport React, { useState, useEffect } from \"react\";\n\nconst AlgorithmsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  height: auto;\n  width: 100%;\n  background-color: #61dafb;\n  justify-content: center;\n  align-items: center;\n  overflow-x: scroll;\n\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nconst BodyWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  background-color: white;\n  flex-grow: 20;\n  align-items: flex-start;\n  justify-content: space-evenly;\n  overflow-y: visible;\n  overflow-x: hidden;\n\n  ${media.mobile} {\n    flex-direction: column-reverse;\n    justify-content: center;\n    align-items: flex-end;\n  }\n`;\n\nconst ItemRowDescription = styled.div`\n  width: 66%;\n  background-color: transparent;\n  display: grid;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-items: center;\n  height: auto;\n  margin-left: 10%;\n  width: 100vw;\n  overflow: visible;\n\n  justify-content: space-evenly;\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    margin: 0%;\n  }\n`;\n\nconst ItemRowContent = styled.div`\n  width: 66%;\n  background-color: transparent;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-items: center;\n  height: auto;\n  margin-right: 10%;\n  width: 100vw;\n\n  justify-content: center;\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n\n    height: 40vh;\n    margin-top: \"30vh\";\n\n    margin: 0%;\n    margin-bottom: 10vh;\n  }\n`;\n\nconst InputValue = styled.input`\n  border: 0;\n  background-color: #e8e8e8;\n\n  border-radius: 4vh;\n  text-align: center;\n  font-size: 4vh;\n  padding: 2vh;\n  margin-left: 1vw;\n  max-width: 10vw;\n  font-weight: bold;\n  color: #535353;\n  outline: none;\n\n  ${media.mobile} {\n    max-width: none;\n    border-radius: 2vh;\n    width: 10vh;\n    height: 2vh;\n\n    font-size: 3vh;\n  }\n`;\n\nconst AddButton = styled.div`\n  display: flex;\n  width: auto;\n  height: 10vh;\n  background-color: #78fc59;\n  border-radius: 4vw;\n  margin-left: 1vh;\n  margin-right: 1vh;\n  align-items: center;\n  align-self: center;\n  justify-content: center;\n\n  p {\n    font-weight: bold;\n    color: white;\n    font-size: 7vh;\n  }\n\n  ${media.mobile} {\n    height: 6vh;\n    border-radius: 2vh;\n\n    p {\n      font-size: 5vh;\n    }\n  }\n`;\n\nconst MinusButton = styled.div`\n  display: flex;\n  width: 10vh;\n  height: 10vh;\n  background-color: #f06449;\n  border-radius: 4vh;\n  margin-top: 2vh;\n  margin-left: 2vh;\n  align-items: center;\n\n  justify-content: center;\n\n  p {\n    font-weight: bold;\n    color: white;\n    font-size: 7vh;\n  }\n\n  ${media.mobile} {\n    border-radius: 2vh;\n    width: 6vh;\n    height: 6vh;\n    margin-top: 0vh;\n    p {\n      font-size: 5vh;\n    }\n  }\n`;\n\nconst ArrayHolder = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  background-color: transparent;\n  height: auto;\n  width: 38vw;\n  padding-top: 2vh;\n\n  align-items: center;\n  overflow-y: visible;\n  overflow-x: hidden;\n\n  h1 {\n    color: #535353;\n    font-size: 4vh;\n    font-weight: bold;\n    animation: bob 3s infinite ease;\n  }\n\n  @keyframes bob {\n    0% {\n      transform: translate(0vh, 0vh);\n    }\n    50% {\n      transform: translate(0vh, -2vh);\n    }\n    100% {\n      transform: translate(0vh, 0vh);\n    }\n  }\n\n  ${media.mobile} {\n    justify-content: flex-start;\n    align-items: center;\n    width: 100vw;\n    margin: 0%;\n    height: 49vh;\n    margin-top: \"30vh\";\n  }\n`;\n\nconst ControlHolder = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-auto-rows: 1fr;\n  position: relative;\n  height: 12vh;\n  margin-bottom: 2vh;\n  align-items: center;\n  justify-content: center;\n\n  z-index: 0;\n  margin-top: 2vh;\n  background-color: transparent;\n  border-radius: 2vh;\n  ${media.mobile} {\n    height: 7vh;\n    width: 100%;\n    margin-bottom: 0vh;\n  }\n`;\n\nconst ArrayPosHolder = styled.div`\n  display: grid;\n  background-color: transparent;\n\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n  grid-template-rows: 1fr 1fr auto;\n\n  ${media.mobile} {\n    width: 100vw;\n  }\n`;\n\nconst BackLink = styled.div`\n  /* lets use react link */\n  padding-left: 2%;\n`;\n\nconst TextInsert = styled.input`\n  font-size: 5vh;\n  width: 8vh;\n\n  text-align: center;\n  font-weight: bolder;\n  background: none;\n  border: none;\n\n  color: #ffffff;\n  ::placeholder {\n    color: white;\n  }\n\n  outline: none;\n`;\n\nconst StaticPosition = styled.div`\n  position: fixed;\n  margin-top: 60vh;\n  ${media.mobile} {\n    margin-top: inherit;\n    position: relative;\n  }\n`;\n\nfunction Info(props) {\n  return (\n    <Item style={{ backgroundColor: props.colour }}>\n      <h1>{props.title}</h1>\n\n      <p>{props.description}</p>\n    </Item>\n  );\n}\n\nfunction MainInfo(props) {\n  var screenSize;\n  var itemPadding;\n  if (window.innerWidth < 1024) {\n    screenSize = \"50vh\";\n    itemPadding = \"2vh\";\n  } else {\n    screenSize = \"30vh\";\n    itemPadding = \"0vh\";\n  }\n\n  return (\n    <Item\n      id=\"mainInfo\"\n      style={{\n        backgroundColor: props.colour,\n        minHeight: screenSize,\n        margin: itemPadding,\n      }}\n    >\n      <h1>{props.title}</h1>\n\n      <p>{props.description}</p>\n    </Item>\n  );\n}\n\nfunction BinarySearch() {\n  const [arrayLink, setArrayLink] = useState([]);\n  const [positionLink, setPositionLink] = useState([]);\n  const [arrayValue, setArrayValue] = useState(10);\n  const [arrayPosition, setArrayPosition] = useState(0);\n  const [indexToChange, setIndexToChange] = useState(null);\n  const [arrayID, setArrayID] = useState(0);\n  const [shouldChange, setShouldChange] = useState(0);\n\n  const [foreground, setForeground] = useState(null);\n  const [background, setBackground] = useState(null);\n  const [elementState, setElementState] = useState(null);\n  const [elementTextColour, setElementTextColour] = useState(null);\n\n  const [found, setFound] = useState(null);\n\n  //For Links Between\n\n  const movementMap = [\n    \"translate(0vh, -4vh) rotate(20deg)\",\n    \"translate(-6vh, -4vh) rotate(-20deg)\",\n    /* \"translate(6vh, -4vh) rotate(-20deg)\",\n    \"translate(5vh, -4vh) rotate(200deg)\",*/\n  ];\n\n  //1 and 3 are the same\n  const arrayMovementMap = [\"translate(5vh, 0vh) \", \" translate(-5vh, 0vh) \"];\n\n  //Will run through 3 possible states\n  const [movementIterator, setMovementIterator] = useState(0);\n  const [transform, setTransform] = useState(movementMap[movementIterator]);\n\n  const [arrayTransform, setArrayTransform] = useState(\n    arrayMovementMap[movementIterator]\n  );\n\n  //For binary search:\n  /*const [middle, setMiddle] = useState(null);\n  const [low, setLow] = useState(null);\n  const [mid, setMid] = useState(null);\n  const [high, setHigh] = useState(null);*/\n\n  function sleep(ms) {\n    console.log(ms);\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  let highlightInstruction = document.getElementById(\"mainInfo\");\n  async function binarySearchFunction(array, low, high, target) {\n    if (high >= low) {\n      let mid = Math.floor(low + (high - low) / 2);\n\n      updateColours(low, mid, high);\n\n      if (array[mid].arrayValue == target) {\n        //setFound(\"found at index \" + mid);\n        highlightInstruction.style.transition = \"background-color 1000ms ease\";\n        highlightInstruction.style.backgroundColor = \"#5ECC44\";\n        document.getElementById(\"taskDescription\").style.transition =\n          \"font-size 1000ms ease\";\n        document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n        document.getElementById(\"taskDescription\").innerHTML =\n          \"found at index \" + mid;\n        await sleep(2500);\n        highlightInstruction.style.backgroundColor = \"#F06449\";\n        document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n        return;\n      }\n\n      if (array[mid].arrayValue > target) {\n        // setFound(\n        // array[mid].arrayValue + \" > \" + target + \" must be in first half\"\n        //);\n        highlightInstruction.style.transition = \"background-color 1000ms ease\";\n        highlightInstruction.style.backgroundColor = \"#44BAB5\";\n        document.getElementById(\"taskDescription\").style.transition =\n          \"font-size 1000ms ease\";\n        document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n        document.getElementById(\"taskDescription\").innerHTML =\n          \"mid (\" +\n          array[mid].arrayValue +\n          \") > \" +\n          target +\n          \" must be in first half\";\n        await sleep(2500);\n        highlightInstruction.style.backgroundColor = \"#F06449\";\n        document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n        await sleep(4000);\n        return binarySearchFunction(array, low, mid - 1, target);\n      }\n\n      //setFound(\n      //  array[mid].arrayValue + \" < \" + target + \", must be in second half\"\n      //);\n\n      highlightInstruction.style.transition = \"background-color 1000ms ease\";\n      highlightInstruction.style.backgroundColor = \"#FF3F1A\";\n      document.getElementById(\"taskDescription\").style.transition =\n        \"font-size 1000ms ease\";\n      document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n      document.getElementById(\"taskDescription\").innerHTML =\n        \"mid (\" +\n        array[mid].arrayValue +\n        \") < \" +\n        target +\n        \" must be in second half\";\n      await sleep(2500);\n      highlightInstruction.style.backgroundColor = \"#F06449\";\n      document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n      await sleep(4000);\n      return binarySearchFunction(array, mid + 1, high, target);\n    }\n    //setFound(\"not found\");\n    highlightInstruction.style.transition = \"background-color 1000ms ease\";\n    highlightInstruction.style.backgroundColor = \"#44BAB5\";\n    document.getElementById(\"taskDescription\").style.transition =\n      \"font-size 1000ms ease\";\n    document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n    document.getElementById(\"taskDescription\").innerHTML = \"not found\";\n    await sleep(2500);\n    highlightInstruction.style.backgroundColor = \"#F06449\";\n    document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n    return;\n  }\n\n  function updateColours(low, mid, high) {\n    let newArrayLink = [...arrayLink];\n\n    //Low\n    newArrayLink[low].foreground =\n      \"linear-gradient(to  right, #44BAB5, #44BAB5)\";\n    newArrayLink[low].background =\n      \"linear-gradient(to  right, #2D9D98, #2D9D98)\";\n    newArrayLink[low].elementState = \"low \";\n    newArrayLink[low].elementTextColour = \"#2D9D98\";\n\n    //Mid\n    newArrayLink[mid].foreground =\n      \"linear-gradient(to  right, #5ECC44, #5ECC44)\";\n    newArrayLink[mid].background =\n      \"linear-gradient(to  right, #4AA734, #4AA734)\";\n    newArrayLink[mid].elementState = \"mid \";\n    newArrayLink[mid].elementTextColour = \"#4AA734\";\n\n    //High\n    newArrayLink[high].foreground =\n      \"linear-gradient(to  right, #FF3F1A, #FF3F1A)\";\n    newArrayLink[high].background =\n      \"linear-gradient(to  right, #CB391E, #CB391E)\";\n    newArrayLink[high].elementState = \"high \";\n    newArrayLink[high].elementTextColour = \"#CB391E\";\n\n    if (low === mid) {\n      newArrayLink[mid].foreground =\n        \"linear-gradient(to right, #44BAB5 0%,#44BAB5 50%,#000000 50%,#5ECC44 50%,#5ECC44 100%)\";\n      newArrayLink[low].elementState = \" \";\n      newArrayLink[mid].elementState = \" \";\n      newArrayLink[high].elementTextColour = \"white\";\n    }\n\n    if (mid === high) {\n      newArrayLink[mid].foreground =\n        \"linear-gradient(to right, green 0%,green 50%,#000000 50%,red 50%,red 100%)\";\n      newArrayLink[high].elementState = \" \";\n      newArrayLink[mid].elementState = \" \";\n      newArrayLink[high].elementTextColour = \"white\";\n    }\n\n    if (low === high) {\n      newArrayLink[low].foreground =\n        \"linear-gradient(to right, blue 0%,blue 50%,#000000 50%,red 50%,red 100%)\";\n      newArrayLink[high].elementState = \" \";\n      newArrayLink[low].elementState = \" \";\n      newArrayLink[high].elementTextColour = \"white\";\n    }\n\n    if (low === high && low === mid) {\n      newArrayLink[mid].foreground =\n        \"linear-gradient(to right, #44BAB5 0%,#44BAB5 33%,#000000 33%,#5ECC44 33%,#5ECC44 66%, #000000 66%, #FF3F1A 66%,#FF3F1A 100%)\";\n      newArrayLink[high].elementState = \"\";\n      newArrayLink[low].elementState = \"\";\n      newArrayLink[mid].elementState = \"\";\n      newArrayLink[high].elementTextColour = \"gold\";\n    }\n\n    let i;\n    for (i = 0; i < 10; i++) {\n      if (i !== low && i !== mid && i !== high) {\n        if (i > low && i < high) {\n          newArrayLink[i].foreground =\n            \"linear-gradient(to  right, #B492BE, #B492BE)\";\n          newArrayLink[i].background =\n            \"linear-gradient(to  right, #897390, #897390)\";\n          newArrayLink[i].elementState = \"\";\n          newArrayLink[i].elementTextColour = \"\";\n        } else {\n          newArrayLink[i].foreground =\n            \"linear-gradient(to  right, #d1d1d1, #d1d1d1)\";\n          newArrayLink[i].background =\n            \"linear-gradient(to  right, #ebebeb, #ebebeb)\";\n          newArrayLink[i].elementState = \"\";\n          newArrayLink[i].elementTextColour = \"\";\n        }\n      }\n    }\n\n    setArrayLink(newArrayLink);\n    //setArrayLink({ ...arrayLink, [array.arrayValue]: arrayValue });\n  }\n\n  function changeArrayFromInput(value, id) {\n    console.log(id);\n    let newArrayLink = [...arrayLink];\n    newArrayLink[id].arrayValue = value;\n    setArrayLink(newArrayLink);\n    console.log((newArrayLink[id].arrayValue = value));\n  }\n\n  const [changer, setChanger] = useState(0);\n\n  const initialArray = useEffect(() => {\n    setArrayLink([\n      ...arrayLink,\n      {\n        arrayValue,\n        arrayID,\n        foreground,\n        background,\n        elementState,\n        elementTextColour,\n      },\n    ]);\n    setArrayID(arrayID + 1);\n  }, [changer]);\n\n  const run10times = useEffect(() => {\n    if (changer == 0) {\n      window.scrollTo({ top: 0, behavior: \"smooth\" });\n    }\n    if (changer < 9) {\n      setChanger(changer + 1);\n      setArrayValue(arrayValue + 1);\n    }\n  }, [arrayLink]);\n\n  return (\n    <AlgorithmsWrapper>\n      <TopWrapper>\n        <BackLink as={Link} to=\"/algorithms\">\n          <BackArrow />\n        </BackLink>\n\n        <Title>binary search</Title>\n      </TopWrapper>\n      <BodyWrapper>\n        <ItemRowDescription>\n          <MainInfo\n            colour=\"#F06449\"\n            title=\"binary search\"\n            description={\n              <div>\n                <p\n                  id=\"taskDescription\"\n                  style={{\n                    textAlign: \"center\",\n                    fontSize: \"18px\",\n                    minHeight: \"5vh\",\n                    maxHeight: \"5vh\",\n                  }}\n                >\n                  a simple search algorithm for sorted arrays\n                  <br />\n                  <br /> type your own numbers in <br /> on each box\n                </p>\n                <p\n                  id=\"queue\"\n                  style={{\n                    margin: \"0px\",\n                    marginTop: \"1vh\",\n                    padding: \"0px\",\n                    textAlign: \"center\",\n                    fontSize: \"120%\",\n                  }}\n                ></p>\n              </div>\n            }\n          />\n          <Info\n            colour=\"#6DD3CE\"\n            title=\"use cases\"\n            description={\n              <div>\n                <p>\n                  while this search algorithm is relatively easy to understand\n                  and implement, it only works if the array is sorted.\n                  otherwise, it will not know which half of the array to look\n                  in.\n                  <br />\n                  <br />\n                  therefore, it should only be used applications where data is\n                  sorted. this could be in something like a library catalogue\n                  where books are sorted in id or name order.\n                </p>\n              </div>\n            }\n          />\n          <Info\n            colour=\"#FFA5B2\"\n            title=\"cost\"\n            description={\n              <div>\n                <p>\n                  binary search: O(log n)\n                  <br />\n                  <br />\n                  why? every iteration, the number of elements being looked at\n                  is halved.\n                </p>\n              </div>\n            }\n          />\n        </ItemRowDescription>\n        <ItemRowContent>\n          {/*   <Array value={10} />\n          <ArrayLine\n            rotation={\"translate(-2vh, 1vh) rotate(-20deg) \"}\n            movement={\"5vw\"}\n          />\n          <Array value={20} movement={\"5vw\"} />\n          <ArrayLine\n            rotation={\"translate(-3vh, 0vh) rotate(20deg) \"}\n            movement={\"5vw\"}\n          />\n          <Array value={30} movement={\"-5vw\"} />*/}\n          <StaticPosition>\n            <ArrayHolder>\n              <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                <h1>{found}</h1>\n\n                <ArrayPosHolder>\n                  {arrayLink.map(\n                    ({\n                      arrayValue,\n                      arrayID,\n                      foreground,\n                      background,\n                      elementState,\n                      elementTextColour,\n                    }) => (\n                      <React.Fragment>\n                        <ArrayElement\n                          value={arrayValue}\n                          id={arrayID}\n                          movement={arrayTransform}\n                          foreground={foreground}\n                          background={background}\n                          elementState={elementState}\n                          textColour={elementTextColour}\n                          textInsert={\n                            <TextInsert\n                              placeholder={arrayValue}\n                              onChange={(event) =>\n                                changeArrayFromInput(\n                                  event.target.value,\n                                  arrayID\n                                )\n                              }\n                            ></TextInsert>\n                          }\n                        />\n                      </React.Fragment>\n                    )\n                  )}\n                </ArrayPosHolder>\n              </div>\n            </ArrayHolder>\n\n            <ControlHolder>\n              <InputValue\n                placeholder=\"find\"\n                onChange={(event) => setArrayValue(event.target.value)}\n              />\n\n              <AddButton\n                onClick={() =>\n                  binarySearchFunction(arrayLink, 0, 9, arrayValue)\n                }\n              >\n                <p>+</p>\n              </AddButton>\n            </ControlHolder>\n          </StaticPosition>\n        </ItemRowContent>\n      </BodyWrapper>\n    </AlgorithmsWrapper>\n  );\n}\n\nexport default BinarySearch;\n","/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/binarysearch/ArrayElement.js",[],"/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/quicksort/QuickSort.js",["170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192"],"import { Link, useHistory } from \"react-router-dom\";\nimport { ReactComponent as BackArrow } from \"../../icons/BackArrow.svg\";\nimport styled from \"styled-components\";\nimport { TopWrapper, Title, media, Item } from \"../../Shared\";\nimport ArrayElement from \"./ArrayElement\";\nimport React, { useState, useEffect } from \"react\";\n\nconst AlgorithmsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  height: auto;\n  width: 100%;\n  background-color: #61dafb;\n  justify-content: center;\n  align-items: center;\n  overflow-x: scroll;\n\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nconst BodyWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  background-color: white;\n  flex-grow: 20;\n  align-items: flex-start;\n\n  justify-content: space-evenly;\n  overflow-y: visible;\n  overflow-x: hidden;\n\n  ${media.mobile} {\n    flex-direction: column-reverse;\n    justify-content: center;\n    align-items: flex-end;\n  }\n`;\n\nconst ItemRowDescription = styled.div`\n  width: 66%;\n  background-color: transparent;\n  display: grid;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-items: center;\n  height: auto;\n  margin-left: 10%;\n  width: 100vw;\n  overflow: visible;\n\n  justify-content: space-evenly;\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    margin: 0%;\n  }\n`;\n\nconst ItemRowContent = styled.div`\n  width: 66%;\n  background-color: transparent;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-items: center;\n\n  height: auto;\n  margin-right: 10%;\n  width: 100vw;\n\n  justify-content: center;\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n\n    height: 40vh;\n\n    margin: 0%;\n    margin-bottom: 10vh;\n  }\n`;\n\nconst AddButton = styled.div`\n  display: flex;\n  width: auto;\n  min-width: 10vw;\n  height: 10vh;\n  background-color: #ffe26a;\n  border-radius: 4vh;\n  margin-left: 1vw;\n  margin-right: 1vw;\n  align-items: center;\n  align-self: center;\n  justify-content: center;\n\n  p {\n    font-weight: bold;\n    color: white;\n    font-size: 7vh;\n  }\n\n  ${media.mobile} {\n    height: 6vh;\n\n    p {\n      font-size: 5vh;\n    }\n  }\n`;\n\nconst ArrayHolder = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  background-color: transparent;\n  height: auto;\n  width: 38vw;\n  padding-top: 2vh;\n\n  align-items: center;\n  overflow-y: visible;\n  overflow-x: hidden;\n\n  h1 {\n    color: #535353;\n    font-size: 4vh;\n    font-weight: bold;\n    animation: bob 3s infinite ease;\n  }\n\n  @keyframes bob {\n    0% {\n      transform: translate(0vh, 0vh);\n    }\n    50% {\n      transform: translate(0vh, -2vh);\n    }\n    100% {\n      transform: translate(0vh, 0vh);\n    }\n  }\n\n  ${media.mobile} {\n    justify-content: flex-start;\n    align-items: center;\n    width: 100vw;\n    margin: 0%;\n    height: 49vh;\n    margin-top: \"30vh\";\n  }\n`;\n\nconst ControlHolder = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-auto-rows: 1fr;\n  position: relative;\n  height: 12vh;\n  margin-bottom: 2vh;\n  align-items: center;\n  justify-content: center;\n  max-width: 90vw;\n\n  z-index: 0;\n  margin-top: 2vh;\n  background-color: transparent;\n  border-radius: 2vh;\n  ${media.mobile} {\n    height: 7vh;\n    width: 100%;\n    margin-bottom: 0vh;\n  }\n`;\n\nconst ArrayPosHolder = styled.div`\n  display: grid;\n  background-color: transparent;\n\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n  grid-template-rows: 1fr 1fr auto;\n\n  ${media.mobile} {\n    width: 100vw;\n  }\n`;\n\nconst BackLink = styled.div`\n  /* lets use react link */\n  padding-left: 2%;\n`;\n\nconst TextInsert = styled.input`\n  font-size: 5vh;\n  width: 8vh;\n\n  text-align: center;\n  font-weight: bolder;\n  background: none;\n  border: none;\n\n  color: #ffffff;\n  ::placeholder {\n    color: white;\n  }\n\n  outline: none;\n`;\n\nconst StaticPosition = styled.div`\n  position: fixed;\n  margin-top: 60vh;\n\n  ${media.mobile} {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-top: inherit;\n    position: relative;\n  }\n`;\n\nfunction Info(props) {\n  return (\n    <Item style={{ backgroundColor: props.colour }}>\n      <h1>{props.title}</h1>\n\n      <p>{props.description}</p>\n    </Item>\n  );\n}\n\nfunction MainInfo(props) {\n  var screenSize;\n  var itemPadding;\n  if (window.innerWidth < 1024) {\n    screenSize = \"50vh\";\n    itemPadding = \"2vh\";\n  } else {\n    screenSize = \"30vh\";\n    itemPadding = \"0vh\";\n  }\n\n  return (\n    <Item\n      id=\"mainInfo\"\n      style={{\n        backgroundColor: props.colour,\n        minHeight: screenSize,\n        margin: itemPadding,\n      }}\n    >\n      <h1>{props.title}</h1>\n\n      <p>{props.description}</p>\n    </Item>\n  );\n}\nfunction QuickSort() {\n  const [arrayLink, setArrayLink] = useState([]);\n  const [positionLink, setPositionLink] = useState([]);\n  const [arrayValue, setArrayValue] = useState(\n    Math.floor(Math.random() * 99) + 1\n  );\n  const [arrayPosition, setArrayPosition] = useState(0);\n  const [indexToChange, setIndexToChange] = useState(null);\n  const [arrayID, setArrayID] = useState(0);\n  const [shouldChange, setShouldChange] = useState(0);\n\n  const [foreground, setForeground] = useState(null);\n  const [background, setBackground] = useState(null);\n  const [elementState, setElementState] = useState(null);\n  const [elementTextColour, setElementTextColour] = useState(null);\n\n  const [found, setFound] = useState(null);\n\n  //For Links Between\n\n  const movementMap = [\n    \"translate(0vh, -4vh) rotate(20deg)\",\n    \"translate(-6vh, -4vh) rotate(-20deg)\",\n    /* \"translate(6vh, -4vh) rotate(-20deg)\",\n    \"translate(5vh, -4vh) rotate(200deg)\",*/\n  ];\n  let highlightInstruction = document.getElementById(\"mainInfo\");\n  //1 and 3 are the same\n  const arrayMovementMap = [\"translate(5vh, 0vh) \", \" translate(-5vh, 0vh) \"];\n\n  //Will run through 3 possible states\n  const [movementIterator, setMovementIterator] = useState(0);\n  const [transform, setTransform] = useState(movementMap[movementIterator]);\n\n  const [arrayTransform, setArrayTransform] = useState(\n    arrayMovementMap[movementIterator]\n  );\n\n  async function quickSortFunction(low, high) {\n    if (low < high) {\n      let pi = await partition(low, high);\n      console.log(\"Pi: \" + pi);\n\n      quickSortFunction(low, pi - 1);\n\n      await sleep(2000);\n\n      quickSortFunction(pi + 1, high);\n      await sleep(2000);\n    }\n    await sleep(2500);\n  }\n\n  async function partition(low, high) {\n    let pivot = arrayLink[high];\n\n    let i = low - 1;\n    let j;\n    console.log(arrayLink[low].arrayValue);\n    console.log(arrayLink[high].arrayValue);\n\n    for (j = low; j <= high - 1; j++) {\n      updateColours(i, j, high);\n\n      if (arrayLink[j].arrayValue >= pivot.arrayValue) {\n        // If current element is smaller than the pivot\n        // setFound(\"j is not smaller than \" + pivot.arrayValue);\n        highlightInstruction.style.transition = \"background-color 1000ms ease\";\n        highlightInstruction.style.backgroundColor = \"#5ECC44\";\n        document.getElementById(\"taskDescription\").style.transition =\n          \"font-size 1000ms ease\";\n        document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n        document.getElementById(\"taskDescription\").innerHTML =\n          \"j is not smaller than \" + pivot.arrayValue;\n        await sleep(1000);\n        highlightInstruction.style.backgroundColor = \"#F06449\";\n        document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n      }\n\n      if (arrayLink[j].arrayValue < pivot.arrayValue) {\n        console.log(\"called!\");\n        i++; // increment index of smaller element\n        // setFound(\"j is smaller than \" + pivot.arrayValue);\n        highlightInstruction.style.transition = \"background-color 1000ms ease\";\n        highlightInstruction.style.backgroundColor = \"#D059FC\";\n        document.getElementById(\"taskDescription\").style.transition =\n          \"font-size 1000ms ease\";\n        document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n        document.getElementById(\"taskDescription\").innerHTML =\n          \"j is smaller than \" + pivot.arrayValue;\n        await sleep(1000);\n        highlightInstruction.style.backgroundColor = \"#F06449\";\n        document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n        updateColours(i, j, high);\n\n        if (i == j) {\n          /*setFound(\n            \" j is smaller than \" +\n              pivot.arrayValue +\n              \", i and j will swap,\" +\n              \" \\n\\nbut i = j so nothing happens \"\n          );*/\n\n          highlightInstruction.style.transition =\n            \"background-color 1000ms ease\";\n          highlightInstruction.style.backgroundColor = \"#D059FC\";\n          document.getElementById(\"taskDescription\").style.transition =\n            \"font-size 1000ms ease\";\n          document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n          document.getElementById(\"taskDescription\").innerHTML =\n            \" j is smaller than \" + pivot.arrayValue;\n\n          await sleep(1000);\n\n          document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n          await sleep(1000);\n          document.getElementById(\"taskDescription\").innerHTML =\n            \"so i moves up 1 \";\n          document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n          await sleep(2500);\n\n          document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n          await sleep(1000);\n          document.getElementById(\"taskDescription\").innerHTML =\n            \"but now i = j so nothing happens \";\n          document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n          await sleep(1000);\n          //Maybe need to swap here instead for colours\n          await swap(i, j);\n          highlightInstruction.style.backgroundColor = \"#F06449\";\n          document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n          document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n        } else {\n          //setFound(\n          //  \"j is smaller than \" + pivot.arrayValue + \", i and j will swap\"\n          //);\n          document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n          await sleep(1000);\n          document.getElementById(\"taskDescription\").innerHTML =\n            \"i moves up 1 \";\n          document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n          await sleep(1500);\n          highlightInstruction.style.transition =\n            \"background-color 1000ms ease\";\n          highlightInstruction.style.backgroundColor = \"#D059FC\";\n          document.getElementById(\"taskDescription\").style.transition =\n            \"font-size 1000ms ease\";\n          document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n          document.getElementById(\"taskDescription\").innerHTML =\n            \"i and j will swap their values\";\n          await sleep(1500);\n          //Maybe need to swap here instead for colours\n          await swap(i, j);\n          highlightInstruction.style.backgroundColor = \"#F06449\";\n          document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n          highlightInstruction.style.backgroundColor = \"#D059FC\";\n        }\n      }\n      await sleep(1500);\n    }\n\n    highlightInstruction.style.transition = \"background-color 1000ms ease\";\n    highlightInstruction.style.backgroundColor = \"#44BAB5\";\n    document.getElementById(\"taskDescription\").style.transition =\n      \"font-size 1000ms ease\";\n    document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n    document.getElementById(\"taskDescription\").innerHTML =\n      \"j has reached the end\";\n    await sleep(2500);\n\n    highlightInstruction.style.backgroundColor = \"#F06449\";\n    document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n    await sleep(2500);\n    // setFound(\"pivot will swap with i + 1 \");\n    highlightInstruction.style.transition = \"background-color 1000ms ease\";\n    highlightInstruction.style.backgroundColor = \"#44BAB5\";\n    document.getElementById(\"taskDescription\").style.transition =\n      \"font-size 1000ms ease\";\n    document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n    document.getElementById(\"taskDescription\").innerHTML =\n      \"pivot will now swap with i + 1 \";\n    await sleep(2500);\n\n    highlightInstruction.style.backgroundColor = \"#F06449\";\n    document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n    await swap(i + 1, high);\n    return Promise.resolve(i + 1);\n  }\n\n  async function updateColours(i, j, high) {\n    let newArrayLink = [...arrayLink];\n\n    let c;\n    for (c = 0; c < 10; c++) {\n      if (c !== i && c !== j && c !== high) {\n        if (c > i && c < high) {\n          newArrayLink[c].foreground =\n            \"linear-gradient(to  right, #B492BE, #B492BE)\";\n          newArrayLink[c].background =\n            \"linear-gradient(to  right, #897390, #897390)\";\n          newArrayLink[c].elementState = \"\";\n          newArrayLink[c].elementTextColour = \"\";\n        } else {\n          newArrayLink[c].foreground =\n            \"linear-gradient(to  right, #d1d1d1, #d1d1d1)\";\n          newArrayLink[c].background =\n            \"linear-gradient(to  right, #ebebeb, #ebebeb)\";\n          newArrayLink[c].elementState = \"\";\n          newArrayLink[c].elementTextColour = \"\";\n        }\n      }\n    }\n\n    console.log(\"j: \" + j);\n    newArrayLink[j].foreground = \"linear-gradient(to  right, #5ECC44, #5ECC44)\";\n    newArrayLink[j].background = \"linear-gradient(to  right, #4AA734, #4AA734)\";\n    newArrayLink[j].elementState = \"j \";\n    newArrayLink[j].elementTextColour = \"#4AA734\";\n\n    if (i >= 0) {\n      newArrayLink[i].foreground =\n        \"linear-gradient(to  right, #44BAB5, #44BAB5)\";\n      newArrayLink[i].background =\n        \"linear-gradient(to  right, #2D9D98, #2D9D98)\";\n      newArrayLink[i].elementState = \"i \";\n      newArrayLink[i].elementTextColour = \"#2D9D98\";\n    }\n    newArrayLink[high].foreground =\n      \"linear-gradient(to  right, #FF3F1A, #FF3F1A)\";\n    newArrayLink[high].background =\n      \"linear-gradient(to  right, #CB391E, #CB391E)\";\n    newArrayLink[high].elementState = \"pivot \";\n    newArrayLink[high].elementTextColour = \"#CB391E\";\n\n    setArrayLink(newArrayLink);\n    await sleep(2000);\n  }\n\n  async function swap(i, j) {\n    await sleep(1500);\n    let highlightColours = [...arrayLink];\n    highlightColours[i].foreground =\n      \"linear-gradient(to  right, #D059FC, #D059FC)\";\n    highlightColours[i].background =\n      \"linear-gradient(to  right, #BD08FF, #BD08FF)\";\n    highlightColours[j].foreground =\n      \"linear-gradient(to  right, #D059FC, #D059FC)\";\n    highlightColours[j].background =\n      \"linear-gradient(to  right, #BD08FF, #BD08FF)\";\n\n    setArrayLink(highlightColours);\n\n    await sleep(1500);\n\n    let temp = arrayLink[i].arrayValue;\n    let newArrayLink = [...arrayLink];\n\n    newArrayLink[i].arrayValue = newArrayLink[j].arrayValue;\n    newArrayLink[j].arrayValue = temp;\n\n    setArrayLink(newArrayLink);\n    await sleep(1500);\n  }\n\n  function sleep(ms) {\n    console.log(ms);\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  function changeArrayFromInput(value, id) {\n    console.log(id);\n    let newArrayLink = [...arrayLink];\n    newArrayLink[id].arrayValue = value;\n    setArrayLink(newArrayLink);\n    console.log((newArrayLink[id].arrayValue = value));\n  }\n\n  const [changer, setChanger] = useState(0);\n\n  const initialArray = useEffect(() => {\n    setArrayLink([\n      ...arrayLink,\n      {\n        arrayValue,\n        arrayID,\n        foreground,\n        background,\n        elementState,\n        elementTextColour,\n      },\n    ]);\n    setArrayID(arrayID + 1);\n  }, [changer]);\n\n  const run10times = useEffect(() => {\n    if (changer < 9) {\n      setChanger(changer + 1);\n      setArrayValue(Math.floor(Math.random() * 99) + 1);\n    }\n  }, [arrayLink]);\n\n  return (\n    <AlgorithmsWrapper>\n      <TopWrapper>\n        <BackLink as={Link} to=\"/algorithms\">\n          <BackArrow />\n        </BackLink>\n\n        <Title>quick sort</Title>\n      </TopWrapper>\n      <BodyWrapper>\n        <ItemRowDescription>\n          <MainInfo\n            colour=\"#F06449\"\n            title=\"quick sort\"\n            description={\n              <div>\n                <p\n                  id=\"taskDescription\"\n                  style={{\n                    textAlign: \"center\",\n                    fontSize: \"18px\",\n                    minHeight: \"5vh\",\n                    maxHeight: \"5vh\",\n                  }}\n                >\n                  an efficient sorting algorithm for arrays that works by\n                  breaking the array into smaller sub arrays, sorting them, then\n                  putting them back together\n                </p>\n                <p\n                  id=\"queue\"\n                  style={{\n                    margin: \"0px\",\n                    marginTop: \"1vh\",\n                    padding: \"0px\",\n                    textAlign: \"center\",\n                    fontSize: \"120%\",\n                  }}\n                ></p>\n              </div>\n            }\n          />\n\n          <Info\n            colour=\"#6DD3CE\"\n            title=\"use cases\"\n            description={\n              <div>\n                <p style={{ textAlign: \"center\" }}>\n                  quick sort can be used any time data needs to be sorted. if\n                  the rough locations of where the different values of data\n                  might be are known, it can also be optimised through good\n                  choices of pivots.\n                  <br />\n                </p>\n              </div>\n            }\n          />\n          <Info\n            colour=\"#FFA5B2\"\n            title=\"cost\"\n            description={\n              <div>\n                <p style={{ textAlign: \"center\" }}>\n                  best case O(n)\n                  <br />\n                  <br />\n                  happens when the pivot value is the value closest to the\n                  average of the dataset\n                  <br />\n                  <br />\n                  worst case O(n^2)\n                  <br />\n                  <br />\n                  happens when pivot value is the max / min of the dataset\n                  <br />\n                  <br />\n                  stable: no\n                </p>\n              </div>\n            }\n          />\n        </ItemRowDescription>\n        <ItemRowContent>\n          {/*   <Array value={10} />\n          <ArrayLine\n            rotation={\"translate(-2vh, 1vh) rotate(-20deg) \"}\n            movement={\"5vw\"}\n          />\n          <Array value={20} movement={\"5vw\"} />\n          <ArrayLine\n            rotation={\"translate(-3vh, 0vh) rotate(20deg) \"}\n            movement={\"5vw\"}\n          />\n          <Array value={30} movement={\"-5vw\"} />*/}\n          <StaticPosition>\n            {\" \"}\n            <ArrayHolder>\n              <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                <h1 style={{ minHeight: \"8vh\", maxHeight: \"8vh\" }}>{found}</h1>\n                <ArrayPosHolder>\n                  {arrayLink.map(\n                    ({\n                      arrayValue,\n                      arrayID,\n                      foreground,\n                      background,\n                      elementState,\n                      elementTextColour,\n                    }) => (\n                      <React.Fragment>\n                        <ArrayElement\n                          value={arrayValue}\n                          id={arrayID}\n                          movement={arrayTransform}\n                          foreground={foreground}\n                          background={background}\n                          elementState={elementState}\n                          textColour={elementTextColour}\n                          textInsert={\n                            <TextInsert\n                              placeholder={arrayValue}\n                              onChange={(event) =>\n                                changeArrayFromInput(\n                                  event.target.value,\n                                  arrayID\n                                )\n                              }\n                            ></TextInsert>\n                          }\n                        />\n                      </React.Fragment>\n                    )\n                  )}\n                </ArrayPosHolder>\n              </div>\n            </ArrayHolder>\n            <ControlHolder>\n              <AddButton onClick={() => quickSortFunction(0, 9)}>\n                <p>sort</p>\n              </AddButton>\n            </ControlHolder>\n          </StaticPosition>\n        </ItemRowContent>\n      </BodyWrapper>\n    </AlgorithmsWrapper>\n  );\n}\n\nexport default QuickSort;\n","/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/quicksort/ArrayElement.js",[],["193","194"],"/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/bfs/BFS.js",["195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249"],"import { Link, useHistory } from \"react-router-dom\";\nimport { ReactComponent as BackArrow } from \"../../icons/BackArrow.svg\";\nimport styled from \"styled-components\";\nimport { TopWrapper, Title, media, Item } from \"../../Shared\";\nimport ArrayElement from \"./ArrayElement\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Sketch from \"react-p5\";\nimport p5 from \"p5\";\n\nconst AlgorithmsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  height: auto;\n  width: 100%;\n  background-color: #61dafb;\n  justify-content: center;\n  align-items: center;\n  overflow-x: scroll;\n\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nconst BodyWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  background-color: white;\n  flex-grow: 20;\n  align-items: flex-start;\n  justify-content: space-evenly;\n  overflow-y: visible;\n  overflow-x: hidden;\n\n  ${media.mobile} {\n    flex-direction: column-reverse;\n    justify-content: center;\n    align-items: flex-end;\n  }\n`;\n\nconst ItemRowDescription = styled.div`\n  width: 66%;\n  background-color: transparent;\n  display: grid;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-items: center;\n  height: auto;\n  margin-left: 10%;\n  width: 100vw;\n  overflow: visible;\n\n  justify-content: space-evenly;\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    margin: 0%;\n  }\n`;\n\nconst ItemRowContent = styled.div`\n  background-color: transparent;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  justify-content: center;\n\n  margin-right: 10%;\n  min-width: 40vw;\n  max-width: 40vw;\n  min-height: 100%;\n  max-height: 100%;\n\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n    min-width: 100%;\n\n    min-height: 47vh;\n    margin-top: \"30vh\";\n    margin: 0%;\n  }\n`;\n\nconst InputValue = styled.input`\n  border: 0;\n  background-color: #e8e8e8;\n\n  border-radius: 4vh;\n  text-align: center;\n  font-size: 4vh;\n  padding: 2vh;\n  margin-left: 1vw;\n  max-width: 10vw;\n  font-weight: bold;\n  color: #535353;\n  outline: none;\n\n  ${media.mobile} {\n    max-width: none;\n    border-radius: 2vh;\n    width: 10vh;\n    height: 2vh;\n\n    font-size: 3vh;\n  }\n`;\n\nconst AddButton = styled.div`\n  display: flex;\n  width: 30vw;\n  height: 10vh;\n  background-color: #ffe26a;\n  border-radius: 4vh;\n\n  margin-left: 2vh;\n  align-items: center;\n\n  justify-content: center;\n\n  p {\n    font-weight: bold;\n    color: white;\n    font-size: 6vh;\n  }\n\n  ${media.mobile} {\n    border-radius: 2vh;\n    width: 60vw;\n    height: 6vh;\n    margin-top: 0vh;\n\n    p {\n      font-size: 5vh;\n    }\n  }\n`;\n\nconst ControlHolder = styled.div`\n  display: flex;\n  flex-direction: row;\n  position: relative;\n  min-height: 12vh;\n  align-items: center;\n  justify-content: center;\n\n  z-index: 0;\n  background-color: transparent;\n  ${media.mobile} {\n    height: 7vh;\n    width: 100%;\n    margin-bottom: 0vh;\n  }\n`;\n\nconst BackLink = styled.div`\n  /* lets use react link */\n  padding-left: 2%;\n`;\n\nconst SketchHolder = styled.div`\n  min-width: 40vw;\n  max-width: 40vw;\n  min-height: 70vh;\n  max-height: 70vh;\n  background-color: transparent;\n\n  ${media.mobile} {\n    min-width: 100vw;\n    max-width: 100vw;\n    max-height: 40vh;\n    min-height: 40vh;\n  }\n`;\n\nconst StaticPosition = styled.div`\n  position: fixed;\n  ${media.mobile} {\n    margin-top: inherit;\n    position: relative;\n  }\n`;\n\nconst Instruction = styled.h2`\n  position: absolute;\n  border-radius: 10vh;\n  text-align: center;\n  background-color: white;\n  padding: 1vw;\n  overflow: visible;\n  box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.5);\n\n  animation: bobandfade 8s ease;\n  animation-fill-mode: forwards;\n\n  @keyframes bobandfade {\n    0% {\n      transform: translate(0vh, 0vh);\n    }\n    50% {\n      transform: translate(0vh, -2vh);\n    }\n    80% {\n      opacity: 1;\n    }\n    100% {\n      transform: translate(0vh, 0vh);\n      opacity: 0;\n    }\n  }\n`;\n\nfunction Info(props) {\n  return (\n    <Item style={{ backgroundColor: props.colour }}>\n      <h1>{props.title}</h1>\n\n      <p>{props.description}</p>\n    </Item>\n  );\n}\n\nfunction MainInfo(props) {\n  var screenSize;\n  var itemPadding;\n  if (window.innerWidth < 1024) {\n    screenSize = \"50vh\";\n    itemPadding = \"2vh\";\n  } else {\n    screenSize = \"30vh\";\n    itemPadding = \"0vh\";\n  }\n\n  return (\n    <Item\n      id=\"mainInfo\"\n      style={{\n        backgroundColor: props.colour,\n        minHeight: screenSize,\n        margin: itemPadding,\n      }}\n    >\n      <h1>{props.title}</h1>\n\n      <p>{props.description}</p>\n    </Item>\n  );\n}\n\nfunction ArrayVisParents(props) {\n  return (\n    /////AWDAWDAWD ADD PARENT ID\n    <Item\n      id=\"visParents\"\n      style={{ backgroundColor: props.colour, minHeight: \"15vh\" }}\n    >\n      <h2 style={{ color: \"white\" }}>{props.title}</h2>\n\n      <table style={{ width: \"80%\", borderCollapse: \"collapse\" }}>\n        <thead\n          style={{\n            color: \"white\",\n            fontSize: \"150%\",\n            fontWeight: \"bolder\",\n          }}\n        >\n          <th>0</th>\n          <th>1</th>\n          <th>2</th>\n          <th>3</th>\n          <th>4</th>\n          <th>5</th>\n          <th>6</th>\n          <th>7</th>\n          <th>8</th>\n        </thead>\n        <tr style={{ fontSize: \"150%\" }}>\n          <td id=\"D0\"></td>\n          <td id=\"D1\"></td>\n          <td id=\"D2\"></td>\n          <td id=\"D3\"></td>\n          <td id=\"D4\"></td>\n          <td id=\"D5\"></td>\n          <td id=\"D6\"></td>\n          <td id=\"D7\"></td>\n          <td id=\"D8\"></td>\n        </tr>\n      </table>\n    </Item>\n  );\n}\n\nfunction ArrayVisVisited(props) {\n  return (\n    <Item\n      id=\"visVisited\"\n      style={{ backgroundColor: props.colour, minHeight: \"15vh\" }}\n    >\n      <h2 style={{ color: \"white\" }}>{props.title}</h2>\n\n      <table style={{ width: \"80%\", borderCollapse: \"collapse\" }}>\n        <thead\n          style={{\n            color: \"white\",\n            fontSize: \"150%\",\n            fontWeight: \"bolder\",\n          }}\n        >\n          <th id=\"H0\">0</th>\n          <th id=\"H1\">1</th>\n          <th id=\"H2\">2</th>\n          <th id=\"H3\">3</th>\n          <th id=\"H4\">4</th>\n          <th id=\"H5\">5</th>\n          <th id=\"H6\">6</th>\n          <th id=\"H7\">7</th>\n          <th id=\"H8\">8</th>\n        </thead>\n        <tr style={{ fontSize: \"150%\" }}>\n          <td id=\"V0\"></td>\n          <td id=\"V1\"></td>\n          <td id=\"V2\"></td>\n          <td id=\"V3\"></td>\n          <td id=\"V4\"></td>\n          <td id=\"V5\"></td>\n          <td id=\"V6\"></td>\n          <td id=\"V7\"></td>\n          <td id=\"V8\"></td>\n        </tr>\n      </table>\n    </Item>\n  );\n}\n\nfunction BFS() {\n  const holderRef = useRef();\n  //Frame\n  const [globalWidth, setGlobalWidth] = useState(0);\n  const [globalHeight, setGlobalHeight] = useState(0);\n\n  const [dimensions, setDimensions] = React.useState({\n    height: window.innerHeight,\n    width: window.innerWidth,\n  });\n\n  //Nodes\n  const [nodeLink, setNodeLink] = useState([]);\n  const [nodeValue, setNodeValue] = useState(37);\n  const [nodeID, setNodeID] = useState(0);\n  const [nodeNext, setNodeNext] = useState(null);\n  const [nodeX, setNodeX] = useState(200);\n  const [nodeY, setNodeY] = useState(200);\n  const [looper, setLooper] = useState(0);\n  const [changer, setChanger] = useState(0);\n  const [matrixLoaded, setMatrixLoaded] = useState(false);\n  const [nodesSet, setNodesSet] = useState(false);\n\n  let secondLinks;\n\n  window.addEventListener(\"resize\", function () {\n    // your custom logic\n  });\n\n  const [adjacencyMatrix, setAdjacencyMatrix] = useState([\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  ]);\n\n  const [centerNode, setCenterNode] = useState(null);\n  const [centerIndex, setCenterIndex] = useState(null);\n\n  const createNodes = useEffect(() => {\n    let screenWidth = holderRef.current.getBoundingClientRect().width;\n    let screenHeight = holderRef.current.getBoundingClientRect().height;\n    let nodeID = 0;\n    let nodeValue = 47;\n    let nodeLinkTemp = [];\n    let protection = 0;\n\n    console.log((\"FRAMEH:\", frameHeight + frameWidth) / 15);\n\n    let initialR;\n\n    if (window.innerWidth > 1000) {\n      initialR = 80;\n    } else {\n      initialR = 50;\n    }\n\n    while (nodeLinkTemp.length < 9) {\n      var Node = {\n        x: Math.floor(Math.random() * (screenWidth - 150) + 50),\n        y: Math.floor(Math.random() * (screenHeight - 150) + 50),\n        r: initialR,\n        nodeID: nodeID,\n        nodeValue: Math.floor(Math.random() * 99),\n        isCenter: false,\n        colour: \"#7CED61\",\n        bgColour: \"#61D944\",\n      };\n\n      //Ensures never overlaps\n      var isOverlapping = false;\n      for (let j = 0; j < nodeLinkTemp.length; j++) {\n        var otherNode = nodeLinkTemp[j];\n        var a = Node.x - otherNode.x;\n        var b = Node.y - otherNode.y;\n        var d = Math.sqrt(a * a + b * b);\n\n        if (window.innerWidth > 1000) {\n          if (d < (Node.r + otherNode.r) * 0.8) {\n            isOverlapping = true;\n          }\n        } else {\n          if (d < (Node.r + otherNode.r) * 0.7) {\n            isOverlapping = true;\n          }\n        }\n      }\n\n      //If it is good, push it\n      if (!isOverlapping) {\n        nodeLinkTemp.push(Node);\n        nodeID++;\n      }\n\n      protection++;\n      if (protection > 3000) {\n        console.log(\"too many circles\");\n        break;\n      }\n\n      setNodeLink(nodeLinkTemp);\n    }\n  }, [holderRef]);\n\n  const setNexts = useEffect(() => {\n    if (looper > 6) {\n      let temp = [...nodeLink];\n\n      for (let j = 0; j < nodeLink.length - 1; j++) {\n        temp[j].next = temp[j + 1];\n      }\n\n      setNodeLink(temp);\n    }\n  }, [looper]);\n\n  console.log(nodeLink);\n\n  const [frameWidth, setFrameWidth] = useState();\n  const [frameHeight, setFrameHeight] = useState();\n\n  const [isRendered, setIsRendered] = useState(0);\n\n  const a = useEffect(() => {\n    if (holderRef.current.getBoundingClientRect().width > 0) {\n      setFrameWidth(holderRef.current.getBoundingClientRect().width);\n      setFrameHeight(holderRef.current.getBoundingClientRect().height);\n\n      for (let i = 0; i < nodeLink.length; i++) {\n        nodeLink[i].r = (frameHeight + frameWidth) / 15;\n      }\n    }\n  }, [holderRef.current, isRendered]);\n\n  function setup(p5, canvasParentRef) {\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\n    setGlobalWidth(frameWidth);\n    setGlobalHeight(frameHeight);\n    setIsRendered(1);\n\n    p5.createCanvas(frameWidth, frameHeight).parent(canvasParentRef);\n\n    p5.background(\"#e3dac9\");\n\n    //center\n    let d;\n    let smallest = 999;\n    let currentCenter;\n    let currentCenterIndex;\n\n    //trying dist;\n    for (let k = 0; k < nodeLink.length; k++) {\n      d = parseInt(\n        p5.dist(\n          frameWidth / 2,\n          (frameHeight * 0.8) / 2,\n          nodeLink[k].x,\n          nodeLink[k].y\n        )\n      );\n\n      if (Math.abs(d) < smallest) {\n        smallest = Math.abs(d);\n        currentCenter = nodeLink[k];\n        currentCenterIndex = k;\n      }\n    }\n\n    setCenterNode(currentCenter);\n    setCenterIndex(currentCenterIndex);\n\n    linkMaker(p5, 3, currentCenterIndex);\n    linkMaker(p5, 2, secondLinks);\n  }\n\n  let centerNodeColourer = useEffect(() => {\n    if (centerNode !== null) {\n      centerNode.colour = \"#f2be3a\";\n      centerNode.bgColour = \"#c99b24\";\n    }\n  }, centerNode);\n\n  function linkMaker(p5, numConnections, nodeIndex) {\n    console.log(\"Linkmaker Clay\");\n\n    let distance;\n    let smallest = 9999;\n    let nodeToAdd = null;\n    let indexToAdd = 0;\n    let distanceToAdd = 0;\n    let prevNodes = [];\n    let prevDist = [];\n    let doneBefore = false;\n\n    //trying dist;\n\n    for (let w = 0; w < numConnections; w++) {\n      smallest = 9999;\n      nodeToAdd = null;\n      doneBefore = false;\n\n      for (let k = 0; k < nodeLink.length; k++) {\n        //Makes sure it is not comparing against itself\n        if (k != nodeIndex) {\n          distance = parseInt(\n            p5.dist(\n              nodeLink[nodeIndex].x,\n              nodeLink[nodeIndex].y,\n              nodeLink[k].x,\n              nodeLink[k].y\n            )\n          );\n\n          //Checks if distance has been done before\n          for (let m = 0; m < prevDist.length; m++) {\n            if (distance == prevDist[m]) {\n              doneBefore = true;\n            }\n          }\n\n          //Sets smallest if not done before\n          if (Math.abs(distance) < smallest && !doneBefore) {\n            smallest = Math.abs(distance);\n            nodeToAdd = nodeLink[k];\n            indexToAdd = k;\n            distanceToAdd = distance;\n          }\n        } else {\n          console.log(\"same\");\n        }\n        //End of loop\n        doneBefore = false;\n      }\n\n      prevNodes.push(nodeToAdd);\n\n      prevDist.push(distanceToAdd);\n\n      adjacencyMatrix[indexToAdd][nodeIndex] = 1;\n      adjacencyMatrix[nodeIndex][indexToAdd] = 1;\n\n      secondLinks = indexToAdd;\n    }\n\n    //return prevNodes;\n  }\n\n  function windowResized(p5) {\n    p5.resizeCanvas(\n      holderRef.current.getBoundingClientRect().width,\n      holderRef.current.getBoundingClientRect().height * 0.8\n    );\n  }\n\n  const [aniX, setAniX] = useState(0);\n\n  let draw = (p5) => {\n    p5.clear();\n    p5.noStroke();\n\n    setGlobalWidth(frameWidth);\n    setGlobalHeight(frameHeight);\n    setNodesSet(true);\n\n    for (let m = 0; m < adjacencyMatrix.length; m++) {\n      for (let k = 0; k < adjacencyMatrix.length; k++) {\n        if (adjacencyMatrix[m][k] === 1 && adjacencyMatrix[k][m] == 1) {\n          p5.strokeWeight(20);\n\n          if (nodeLink[k] !== centerNode) {\n            p5.stroke(nodeLink[k].colour);\n          }\n\n          p5.line(nodeLink[m].x, nodeLink[m].y, nodeLink[k].x, nodeLink[k].y);\n          if (nodeLink[k] !== centerNode) {\n            p5.stroke(nodeLink[k].bgColour);\n          }\n          p5.line(\n            nodeLink[m].x + nodeLink[m].r / 6,\n            nodeLink[m].y,\n            nodeLink[k].x + nodeLink[m].r / 6,\n            nodeLink[k].y\n          );\n          p5.noStroke();\n        }\n      }\n    }\n\n    if (activeNode) {\n      p5.strokeWeight(20);\n      p5.stroke(\"#7CED61\");\n      p5.line(activeNode.x, activeNode.y, currX, currY);\n      p5.stroke(\"#61D944\");\n      p5.line(\n        activeNode.x + activeNode.r / 6,\n        activeNode.y,\n        currX + +activeNode.r / 6,\n        currY\n      );\n    }\n\n    p5.noStroke();\n\n    for (let i = 0; i < nodeLink.length; i++) {\n      //Background Circle\n      p5.fill(p5.color(nodeLink[i].bgColour));\n      p5.ellipse(\n        nodeLink[i].x + nodeLink[i].r / 6,\n        nodeLink[i].y,\n        nodeLink[i].r,\n        nodeLink[i].r\n      );\n\n      //Foreground Circle\n      p5.fill(p5.color(nodeLink[i].colour));\n      p5.ellipse(nodeLink[i].x, nodeLink[i].y, nodeLink[i].r, nodeLink[i].r);\n    }\n\n    p5.fill(p5.color(centerNode.bgColour));\n    p5.ellipse(\n      centerNode.x + centerNode.r / 6,\n      centerNode.y,\n      centerNode.r,\n      centerNode.r\n    );\n\n    p5.fill(p5.color(centerNode.colour));\n    p5.ellipse(centerNode.x, centerNode.y, centerNode.r, centerNode.r);\n\n    for (let i = 0; i < nodeLink.length; i++) {\n      p5.textSize(nodeLink[i].r / 2);\n      p5.fill(p5.color(\"white\")).text(\n        nodeLink[i].nodeID,\n        nodeLink[i].x - nodeLink[i].r / 4,\n        nodeLink[i].y + nodeLink[i].r / 6\n      );\n      p5.fill(p5.color(\"#72ff98\"));\n    }\n\n    for (let i = 0; i < nodeLink.length; i++) {\n      nodeLink[i].r = (frameHeight + frameWidth) / 15;\n    }\n\n    //Creating Text\n    //linkMaker(p5, 3, 1);\n  };\n\n  function sleep(ms) {\n    console.log(ms);\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  function mouseWheel(event) {\n    console.log(event);\n\n    if (event.mouseX > 0 && event.mouseY > 0) {\n      for (let m = 0; m < nodeLink.length; m++) {\n        nodeLink[m].y += event._mouseWheelDeltaY / 8;\n      }\n\n      setNodeY(nodeLink[nodeLink.length - 1].y + globalHeight / 8);\n    }\n  }\n\n  function mousePressed(p5) {\n    //ISSUE: IF THERE IS A NODE INBETWEEN LINKED DOEST WORK\n    //FIX: CHECK IF LINKED, LOOP THRU IF NOT\n\n    currX = p5.mouseX;\n    currY = p5.mouseY;\n\n    //First, the closest two nodes will be found\n    let closestIndex;\n    let secondIndex;\n\n    let closestLimit = 0;\n\n    let closestDistance = 0;\n\n    let smallest = 9999;\n\n    for (let m = 0; m < nodeLink.length; m++) {\n      if (p5.dist(nodeLink[m].x, nodeLink[m].y, currX, currY) < smallest) {\n        smallest = p5.dist(nodeLink[m].x, nodeLink[m].y, currX, currY);\n        closestIndex = m;\n        closestDistance = smallest;\n      }\n    }\n\n    smallest = 9999;\n    let secondLimit = 0;\n    secondIndex = closestIndex;\n\n    for (let m = 0; m < nodeLink.length; m++) {\n      if (\n        p5.dist(nodeLink[m].x, nodeLink[m].y, currX, currY) < smallest &&\n        p5.dist(nodeLink[m].x, nodeLink[m].y, currX, currY) > closestDistance &&\n        adjacencyMatrix[m][closestIndex] == 1\n      ) {\n        smallest = p5.dist(nodeLink[m].x, nodeLink[m].y, currX, currY);\n        secondIndex = m;\n      }\n    }\n\n    let toStart = p5.dist(\n      nodeLink[closestIndex].x,\n      nodeLink[closestIndex].y,\n      currX,\n      currY\n    );\n\n    let toEnd = p5.dist(\n      nodeLink[secondIndex].x,\n      nodeLink[secondIndex].y,\n      currX,\n      currY\n    );\n\n    let lineLength = p5.dist(\n      nodeLink[closestIndex].x,\n      nodeLink[closestIndex].y,\n      nodeLink[secondIndex].x,\n      nodeLink[secondIndex].y\n    );\n\n    let buffer = 1;\n\n    if (\n      toStart + toEnd >= lineLength - buffer &&\n      toStart + toEnd <= lineLength + buffer\n    ) {\n      adjacencyMatrix[closestIndex][secondIndex] = 0;\n      adjacencyMatrix[secondIndex][closestIndex] = 0;\n    }\n  }\n\n  let activeNode = null;\n  let currIndex;\n  let currEnd;\n  let currX;\n  let currY;\n\n  function mouseDragged(p5) {\n    let distance;\n\n    for (let i = 0; i < nodeLink.length; i++) {\n      distance = p5.dist(p5.mouseX, p5.mouseY, nodeLink[i].x, nodeLink[i].y);\n      if (distance < nodeLink[i].r && activeNode == null) {\n        nodeLink[i].active = true;\n        activeNode = nodeLink[i];\n\n        document.body.style.overflow = \"hidden\";\n\n        currIndex = i;\n      }\n    }\n\n    currX = p5.mouseX;\n    currY = p5.mouseY;\n\n    p5.noStroke();\n\n    //\n  }\n\n  function mouseReleased(p5) {\n    if (activeNode !== null) {\n      let distance;\n\n      for (let i = 0; i < nodeLink.length; i++) {\n        distance = p5.dist(p5.mouseX, p5.mouseY, nodeLink[i].x, nodeLink[i].y);\n        if (distance < nodeLink[i].r && i !== currIndex) {\n          adjacencyMatrix[i][currIndex] = 1;\n          adjacencyMatrix[currIndex][i] = 1;\n          currEnd = i;\n        }\n      }\n\n      activeNode = null;\n      currX = null;\n      currY = null;\n    }\n\n    document.body.style.overflow = \"auto\";\n  }\n\n  const [toFind, setToFind] = useState(0);\n\n  /*ACTUAL BFS*/\n\n  async function breadthFirstSearch() {\n    if (toFind > nodeLink.length || toFind < 0) {\n      document.getElementById(\"taskDescription\").innerHTML =\n        \"please input a valid node to find!\";\n\n      return;\n    }\n    document.getElementById(\"taskDescription\").innerHTML = \"initialising BFS\";\n\n    //for highlight\n    let highlightParents = document.getElementById(\"visParents\");\n    let highlightVisited = document.getElementById(\"visVisited\");\n\n    let highlightInstruction = document.getElementById(\"mainInfo\");\n\n    for (let m = 0; m < nodeLink.length; m++) {\n      if (nodeLink[m] !== centerNode) {\n        nodeLink[m].colour = \"#7CED61\";\n        nodeLink[m].bgColour = \"#61D944\";\n      } else {\n        // nodeLink[m].colour = \"#6BEBD8\";\n        // nodeLink[m].bgColour = \"#54CCBA\";\n      }\n    }\n\n    let s = centerIndex;\n\n    //Creating the queue\n    let queue = [];\n    document.getElementById(\"queue\").innerHTML = \"queue: [\" + queue + \"]\";\n\n    //creating parent\n    let parent = [];\n    for (let i = 0; i < nodeLink.length; i++) {\n      parent[i] = i;\n      if (i == centerNode.nodeID) {\n        document.getElementById(\"D\" + i).innerHTML = \"-1\";\n      } else {\n        document.getElementById(\"D\" + i).innerHTML = i;\n      }\n      await sleep(500);\n    }\n\n    //Setting all visited to false\n    let visited = [];\n    for (let i = 0; i < nodeLink.length; i++) {\n      visited[i] = false;\n      if (i == centerNode.nodeID) {\n        document.getElementById(\"V\" + s).innerHTML = \"yes\";\n      } else {\n        document.getElementById(\"V\" + i).innerHTML = \"no\";\n      }\n      await sleep(300);\n    }\n\n    //Marking initial as visited\n    visited[s] = true;\n\n    await sleep(500);\n\n    queue.push(s);\n    await sleep(300);\n    console.log(queue[0]);\n\n    while (queue.length > 0) {\n      s = queue[0];\n      console.log(\"S:\", s);\n\n      highlightParents.style.transition = \"background-color 1000ms ease\";\n      highlightInstruction.style.backgroundColor = \"#f2be3a\";\n      document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n      document.getElementById(\"taskDescription\").style.transition =\n        \"font-size 1000ms ease\";\n      document.getElementById(\"taskDescription\").innerHTML =\n        \"current node: \" +\n        '<p style=\"font-size:30px; text-align: center; padding: 0px; margin: 0px\">' +\n        s +\n        \"</p>\";\n\n      nodeLink[s].colour = \"#f2be3a\";\n      nodeLink[s].bgColour = \"#c99b24\";\n      await sleep(2000);\n\n      highlightInstruction.style.transition = \"background-color 1000ms ease\";\n      highlightInstruction.style.backgroundColor = \"#7d34eb\";\n      document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n\n      await sleep(2500);\n      highlightInstruction.style.backgroundColor = \"#F06449\";\n      document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n      queue.shift();\n\n      if (s == toFind) {\n        document.getElementById(\"taskDescription\").innerHTML =\n          '<p style=\"font-size:30px; text-align: center; padding: 0px; margin: 0px\">' +\n          \"target node found!\" +\n          \"</p>\";\n        await sleep(3000);\n        break;\n      }\n\n      for (let j = 0; j < adjacencyMatrix[s].length; j++) {\n        if (adjacencyMatrix[s][j] == 1) {\n          if (visited[j] == false) {\n            //Adding to queue\n\n            document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n            document.getElementById(\"taskDescription\").style.transition =\n              \"font-size 1000ms ease\";\n            document.getElementById(\"taskDescription\").innerHTML =\n              \"adding to queue: \" +\n              '<p style=\"font-size:30px; text-align: center; padding: 0px; margin: 0px\">' +\n              j +\n              \"</p>\";\n            highlightInstruction.style.transition =\n              \"background-color 1000ms ease\";\n            highlightInstruction.style.backgroundColor = \"#7d34eb\";\n            document.getElementById(\"queue\").innerHTML =\n              \"queue: [\" + queue + \"]\";\n            await sleep(1500);\n            nodeLink[j].colour = \"#7d34eb\";\n            nodeLink[j].bgColour = \"#5e1dbf\";\n            await sleep(1500);\n\n            highlightInstruction.style.backgroundColor = \"#F06449\";\n            document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n            await sleep(1000);\n\n            //highlighting the parents\n            parent[j] = s;\n            document.getElementById(\"D\" + j).innerHTML = parent[j];\n\n            document.getElementById(\"D\" + j).style.fontSize = \"200%\";\n            document.getElementById(\"D\" + j).style.transition =\n              \"font-size 1000ms ease\";\n            highlightParents.style.transition = \"background-color 1000ms ease\";\n            highlightParents.style.backgroundColor = \"#7d34eb\";\n            await sleep(1500);\n            highlightParents.style.backgroundColor = \"#F06449\";\n            document.getElementById(\"D\" + j).style.fontSize = \"100%\";\n\n            await sleep(500);\n            //Highligthing the visited\n\n            visited[j] = true;\n            document.getElementById(\"V\" + j).innerHTML = \"yes\";\n\n            document.getElementById(\"V\" + j).style.fontSize = \"200%\";\n            document.getElementById(\"V\" + j).style.transition =\n              \"font-size 1000ms ease\";\n            highlightVisited.style.transition = \"background-color 1000ms ease\";\n            highlightVisited.style.backgroundColor = \"#7d34eb\";\n            await sleep(1500);\n            highlightVisited.style.backgroundColor = \"#F06449\";\n            document.getElementById(\"V\" + j).style.fontSize = \"100%\";\n            await sleep(1500);\n\n            //Pushing to the queue\n\n            queue.push(j);\n            document.getElementById(\"queue\").innerHTML =\n              \"queue: [\" + queue + \"]\";\n            await sleep(500);\n\n            console.log(\"id\", +nodeLink[j].nodeID);\n            if (nodeLink[j].nodeID == toFind) {\n              console.log(\"found at: \", s);\n            }\n\n            console.log(\"Queue: \", queue);\n\n            await sleep(500);\n          }\n        }\n      }\n\n      //End of connections\n      document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n      document.getElementById(\"taskDescription\").style.transition =\n        \"font-size 1000ms ease\";\n      document.getElementById(\"taskDescription\").innerHTML =\n        \"all connections exhausted <br/> moving to next node in queue \";\n      await sleep(3000);\n\n      highlightInstruction.style.transition = \"background-color 1000ms ease\";\n      highlightInstruction.style.backgroundColor = \"#7d34eb\";\n\n      await sleep(2500);\n      highlightInstruction.style.backgroundColor = \"#F06449\";\n      document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n      //updating colour\n\n      nodeLink[s].colour = \"#737894\";\n      nodeLink[s].bgColour = \"#50525e\";\n    }\n    let order = [];\n\n    document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n    document.getElementById(\"taskDescription\").style.transition =\n      \"font-size 1000ms ease\";\n    document.getElementById(\"taskDescription\").innerHTML =\n      \"starting at the target node, we <br/> run back along the parents <br/> to find the final shortest path\";\n    highlightInstruction.style.transition = \"background-color 1000ms ease\";\n    highlightInstruction.style.backgroundColor = \"#f2be3a\";\n    await sleep(1500);\n    document.getElementById(\"queue\").innerHTML = \"order: [\" + order + \"]\";\n    await sleep(2500);\n    highlightInstruction.style.backgroundColor = \"#F06449\";\n    document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n    let n = toFind;\n    let traversals = 0;\n    while (parent[n] != 999) {\n      order.push(n);\n      document.getElementById(\"queue\").innerHTML = \"order: [\" + order + \"]\";\n      document.getElementById(\"H\" + n).style.transition =\n        \"font-size 1000ms ease\";\n      document.getElementById(\"H\" + n).style.fontSize = \"200%\";\n\n      await sleep(1500);\n      document.getElementById(\"H\" + parent[n]).style.fontSize = \"100%\";\n      await sleep(1000);\n      if (parent[n] == n) {\n        break;\n      }\n      n = parent[n];\n    }\n\n    document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n    document.getElementById(\"taskDescription\").style.transition =\n      \"font-size 1000ms ease\";\n    document.getElementById(\"taskDescription\").innerHTML =\n      \"the order is reversed so we start <br/> at the right place\";\n    highlightInstruction.style.transition = \"background-color 1000ms ease\";\n    highlightInstruction.style.backgroundColor = \"#f2be3a\";\n    await sleep(1500);\n    document.getElementById(\"queue\").innerHTML = \"order: [\" + order + \"]\";\n    await sleep(1500);\n    highlightInstruction.style.backgroundColor = \"#F06449\";\n    document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n    order.reverse();\n    await sleep(500);\n\n    document.getElementById(\"queue\").innerHTML = \"order: [\" + order + \"]\";\n    await sleep(1500);\n\n    document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n    document.getElementById(\"taskDescription\").style.transition =\n      \"font-size 1000ms ease\";\n    document.getElementById(\"taskDescription\").innerHTML =\n      \"now, we simply run through <br/> the order\";\n    highlightInstruction.style.transition = \"background-color 1000ms ease\";\n    highlightInstruction.style.backgroundColor = \"#f2be3a\";\n    await sleep(1500);\n    document.getElementById(\"queue\").innerHTML = \"order: [\" + order + \"]\";\n    await sleep(1500);\n    highlightInstruction.style.backgroundColor = \"#F06449\";\n    document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n    if (parent[toFind] != toFind) {\n      findParent(order);\n    }\n  }\n\n  async function findParent(order) {\n    for (let i = 0; i < order.length; i++) {\n      nodeLink[order[i]].colour = \"#F52F2F\";\n      nodeLink[order[i]].bgColour = \"#F66161\";\n\n      document.getElementById(\"H\" + order[i]).style.transition =\n        \"font-size 1000ms ease\";\n      document.getElementById(\"H\" + order[i]).style.fontSize = \"200%\";\n\n      await sleep(1500);\n      document.getElementById(\"H\" + order[i]).style.fontSize = \"100%\";\n\n      await sleep(500);\n    }\n  }\n\n  async function depthFirstSearch() {\n    let s = centerIndex;\n    let stack = [];\n    let visited = [];\n\n    console.log(\"RAN!\");\n\n    for (let k = 0; k < nodeLink.length; k++) {\n      visited[k] = false;\n    }\n\n    stack.push(s);\n    visited[s] = true;\n\n    while (stack.length > 0) {\n      let k = stack.pop();\n      for (let i = nodeLink.length; i > 0; i--) {\n        console.log(\"a\");\n        if (adjacencyMatrix[k][i] == 1) {\n          if (visited[i] == false) {\n            stack.push(i);\n            visited[i] = true;\n            nodeLink[i].colour = \"blue\";\n\n            await sleep(500);\n          }\n        }\n      }\n    }\n  }\n\n  function windowResized(p5) {\n    p5.resizeCanvas(\n      holderRef.current.getBoundingClientRect().width,\n      holderRef.current.getBoundingClientRect().height\n    );\n\n    setGlobalHeight(p5.windowHeight);\n    console.log(\"resize\");\n  }\n\n  function test() {}\n\n  return (\n    <AlgorithmsWrapper className=\"BFS\">\n      <TopWrapper>\n        <BackLink as={Link} to=\"/algorithms\">\n          <BackArrow />\n        </BackLink>\n\n        <Title>breadth first search</Title>\n      </TopWrapper>\n      <BodyWrapper>\n        <ItemRowDescription>\n          <MainInfo\n            colour=\"#F06449\"\n            title=\"bfs\"\n            description={\n              <div>\n                <p\n                  id=\"taskDescription\"\n                  style={{\n                    textAlign: \"center\",\n                    fontSize: \"18px\",\n                    minHeight: \"5vh\",\n                    maxHeight: \"5vh\",\n                  }}\n                >\n                  Finds the shortest path between nodes <br /> in an unweighted\n                  (distances are unknown) graph.\n                </p>\n                <p\n                  id=\"queue\"\n                  style={{\n                    margin: \"0px\",\n                    marginTop: \"1vh\",\n                    padding: \"0px\",\n                    textAlign: \"center\",\n                    fontSize: \"120%\",\n                  }}\n                ></p>\n              </div>\n            }\n          />\n          <ArrayVisParents\n            colour=\"#F06449\"\n            title=\"parents \"\n            description={\n              <div>0 &emsp; 1 &emsp; 2 &emsp; 3 &emsp; 4 &emsp; 5 &emsp; 6</div>\n            }\n          />\n          <ArrayVisVisited\n            colour=\"#F06449\"\n            title=\"visited\"\n            description={<div></div>}\n          />\n          <Info\n            colour=\"#6DD3CE\"\n            title=\"use cases\"\n            description={\n              <div>\n                <p>\n                  as BFS does not need to know the distance between nodes, it is\n                  great in networking applications\n                  <br />\n                  <br />\n                  for example, facebook implements BFS to find the shortest link\n                  between two people, treating friends as nodes connected to the\n                  start point, and friends of friends as the connection's\n                  connections.\n                </p>\n              </div>\n            }\n          />\n          <Info\n            colour=\"#FFA5B2\"\n            title=\"cost\"\n            description={\n              <div>\n                <p>\n                  breadth first search: O(E + V)\n                  <br />\n                  <br />\n                  where E is the number of edges (connections) and V is the\n                  number of vertexes (nodes).\n                  <br />\n                  <br />\n                  why? because every node needs to be scanned through (O(V)),\n                  and only the edges that have not yet been visited yet need to\n                  be scanned (O(E)), so we get O(E + V).\n                </p>\n              </div>\n            }\n          />\n        </ItemRowDescription>\n        <ItemRowContent>\n          <StaticPosition>\n            <SketchHolder id=\"IRC\" ref={holderRef}>\n              {frameWidth < 1 && (\n                <Sketch\n                  setup={test}\n                  draw={draw}\n                  windowResized={windowResized}\n                  mouseWheel={mouseWheel}\n                  mousePressed={mousePressed}\n                  mouseDragged={mouseDragged}\n                  mouseReleased={mouseReleased}\n                  purple={dimensions}\n                />\n              )}\n              {frameWidth > 1 && (\n                <Sketch\n                  setup={setup}\n                  draw={draw}\n                  windowResized={windowResized}\n                  mouseWheel={mouseWheel}\n                  mousePressed={mousePressed}\n                  mouseDragged={mouseDragged}\n                  mouseReleased={mouseReleased}\n                />\n              )}\n            </SketchHolder>\n            <ControlHolder>\n              {/* <InputValue\n              placeholder=\"start\"\n              onChange={(event) => setStartValue(event.target.value)}\n            />\n            <InputValue\n              placeholder=\"end\"\n              onChange={(event) => setEndValue(event.target.value)}\n           />*/}\n\n              <InputValue\n                placeholder=\"find\"\n                onChange={(event) => setToFind(event.target.value)}\n              />\n\n              <AddButton onClick={() => breadthFirstSearch()}>\n                <p>start</p>\n              </AddButton>\n            </ControlHolder>\n          </StaticPosition>\n        </ItemRowContent>\n      </BodyWrapper>\n    </AlgorithmsWrapper>\n  );\n\n  return (\n    <AlgorithmsWrapper className=\"BFS\">\n      <TopWrapper>\n        <BackLink as={Link} to=\"/algorithms\">\n          <BackArrow />\n        </BackLink>\n\n        <Title>breadth first search</Title>\n      </TopWrapper>\n      <BodyWrapper>\n        <div style={{ position: \"absolute\" }}></div>\n        <ItemRowDescription>\n          <Info\n            colour=\"#F06449\"\n            title=\"description\"\n            description={\n              <div>\n                <p>\n                  breadth first search (BFS) is an efficient seaching algorithm\n                  for finding the shortest path between nodes in an unweighted\n                  (distances between nodes are not known) graph.\n                  <br />\n                  <br />\n                  in this case, the shortest path from start to finish is the\n                  one that needs to go through the least nodes.\n                  <br />\n                  <br />\n                  it works by starting at one node, and checking all of its\n                  neighbors or connections. once all of these have been checked,\n                  then the connection's connections are checked. you can think\n                  of it in layers: starting with immediate siblings, then\n                  cousins e.t.c\n                  <br />\n                  <br />\n                  before this algorithm can be run, an adjacency matrix is\n                  needed. this is a 2d array that keeps track of whether or not\n                  two nodes are connected. if nodes 1 and 2 are connected,\n                  <br />\n                  <br />\n                  adjacencyMatrix[1][2] would be 1, and <br />\n                  <br />\n                  adjacencyMatrix[2][1] would also be 1.\n                  <br />\n                  <br />\n                  if two nodes are not connected, the value would instead be 0.\n                  <br />\n                  <br />\n                  <br />\n                  <br />\n                  1. first, a starting node is picked. this can be any node.\n                  like dijkstra's algorithm, a 'visited' array is made, and\n                  every entry except for the starting node is made to be false,\n                  as no other nodes have been explored yet.\n                  <br />\n                  <br />\n                  similarly, a queue is made, which will track which node should\n                  be visited next.\n                  <br />\n                  <br />\n                  2. the starting node is then pushed on to the queue, and a\n                  while loop is begun:\n                  <br />\n                  <br />\n                  <div style={{ paddingLeft: \"2vw\" }}>\n                    while the queue is not empty, let the node to be\n                    investigated next be the first node in the queue. i.e\n                    queue[0]. remove this element from the queue.\n                    <br />\n                    <br />\n                    an inner for loop is started, and runs for every node. we\n                    will call the iterator here j:\n                    <br />\n                    <br />\n                    <div style={{ paddingLeft: \"4vw\" }}>\n                      if adjacencyMatrix[currentNode][j] is equal to 1, and\n                      visited[j] is false, then add it to the queue and make\n                      visited[j] true.\n                      <br />\n                      <br />\n                    </div>\n                  </div>\n                  thats it! when this process is finished, every node will have\n                  been searched.\n                </p>\n              </div>\n            }\n          />\n          <Info\n            colour=\"#6DD3CE\"\n            title=\"use cases\"\n            description={\n              <div>\n                <p>\n                  as BFS does not need to know the distance between nodes, it is\n                  great in networking applications\n                  <br />\n                  <br />\n                  for example, facebook implements BFS to find the shortest link\n                  between two people, treating friends as nodes connected to the\n                  start point, and friends of friends as the connection's\n                  connections.\n                </p>\n              </div>\n            }\n          />\n          <Info\n            colour=\"#FFA5B2\"\n            title=\"cost\"\n            description={\n              <div>\n                <p>\n                  breadth first search: O(E + V)\n                  <br />\n                  <br />\n                  where E is the number of edges (connections) and V is the\n                  number of vertexes (nodes).\n                  <br />\n                  <br />\n                  why? because every node needs to be scanned through (O(V)),\n                  and only the edges that have not yet been visited yet need to\n                  be scanned (O(E)), so we get O(E + V).\n                </p>\n              </div>\n            }\n          />\n        </ItemRowDescription>\n        <ItemRowContent>\n          <StaticPosition>\n            <Instruction>\n              drag between nodes to form a link <br /> tap to break a link\n            </Instruction>\n\n            <SketchHolder id=\"IRC\" ref={holderRef}>\n              {frameWidth < 1 && (\n                <Sketch\n                  setup={test}\n                  draw={draw}\n                  mousePressed={mousePressed}\n                  mouseDragged={mouseDragged}\n                  mouseReleased={mouseReleased}\n                  mouseWheel={mouseWheel}\n                />\n              )}\n              {frameWidth > 1 && (\n                <Sketch\n                  setup={setup}\n                  draw={draw}\n                  mousePressed={mousePressed}\n                  mouseDragged={mouseDragged}\n                  mouseReleased={mouseReleased}\n                  mouseWheel={mouseWheel}\n                  windowResized={windowResized}\n                />\n              )}\n            </SketchHolder>\n            <ControlHolder>\n              <InputValue\n                placeholder=\"find\"\n                onChange={(event) => setToFind(event.target.value)}\n              />\n\n              <AddButton onClick={() => breadthFirstSearch()}>\n                <p>search</p>\n              </AddButton>\n            </ControlHolder>\n          </StaticPosition>\n        </ItemRowContent>\n      </BodyWrapper>\n    </AlgorithmsWrapper>\n  );\n}\n\nexport default BFS;\n\n//Old Draw\n/**\n * \n * \n * let draw = (p5) => {\n    p5.background(\"rgb(0%,100%,10%)\");\n    //Color of the ball\n    p5.stroke(255);\n    p5.strokeWeight(4);\n    //Mentioning that the ball or the circle won't have filled color\n    p5.noFill();\n    //The first 2 parameters are for positioning and the next two are\n    //for size\n\n    p5.noStroke();\n    p5.fill(p5.color(\"#9bffb6\"));\n    p5.ellipse(a + 20, b, 100, 100);\n\n    p5.strokeWeight(20);\n    p5.stroke(\"#72ff98\");\n    p5.line(300, 300, 400, 400);\n    p5.noStroke();\n\n    //Circle\n    p5.fill(p5.color(\"#72ff98\"));\n    p5.ellipse(a, b, 100, 100);\n\n    p5.fill(p5.color(\"#9bffb6\"));\n    p5.ellipse(420, 400, 100, 100);\n\n    p5.fill(p5.color(\"#72ff98\"));\n    p5.ellipse(400, 400, 100, 100);\n\n    p5.strokeWeight(20);\n\n    p5.stroke(\"#72ff98\");\n    p5.line(300, 300, 400, 400);\n\n    p5.stroke(\"#9bffb6\");\n    p5.line(320, 300, 420, 400);\n    let easing = 0.05;\n\n    if (b >= 300) {\n      speed = -1 * easing;\n    }\n    if (b === 250) {\n      speed = 1 * easing;\n    }\n    b = b + speed;\n  };\n */\n\n/* Old shit\n\n let setup = (p5, canvasParentRef) => {\n    globalWidth = p5.windowWidth * 0.4;\n    globalHeight = p5.windowHeight * 0.7;\n\n    let parent = p5.createCanvas(globalWidth, globalHeight).parent(\"IRC\");\n\n    p5.background(\"#e3dac9\");\n\n    //No stroke around circle\n    p5.noStroke();\n\n    //Circle ( x, y, width, height)\n    p5.fill(p5.color(\"#72ff98\"));\n    //p5.ellipse(100, 100, 100, 100);\n\n    var xa = 0;\n\n    /* while (xa < 500) {\n      p5.ellipse(xa, 200, 25, 25);\n      xa = xa + 50;\n    }\n\n    for (let i = 0; i < 20; i++) {\n      //p5.ellipse(xa, 200, 100, 100);\n      //xa = xa + 150;\n    }\n\n    async function andrew() {\n      await sleep(1000);\n    }\n\n    console.log(\"length: \" + nodeLink.length);\n\n    for (let j = 0; j < nodeLink.length; j++) {\n      p5.ellipse(nodeLink[j].x, nodeLink[j].y, 100, 100);\n      console.log(\"Width: \" + p5.windowWidth);\n    }\n\n    p5.rect(0, 0, 55, 55, 20);\n    p5.rect(0, globalHeight, 55, 55, 20);\n    p5.rect(globalWidth, 0, 55, 55, 20);\n    p5.rect(globalWidth, globalHeight, 55, 55, 20);\n\n    // tester(p5, x, y);\n  };\n\n  function sleep(ms) {\n    console.log(ms);\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  const [x, setX] = useState(100);\n  const [y, setY] = useState(100);\n  const [nodeID, setNodeID] = useState(0);\n  const [nodeValue, setNodeValue] = useState(27);\n\n  const testarray = [1, 2, 3, 4, 5];\n\n  let draw = (p5) => {};\n\n  function tester(p5, x, y) {\n    console.log(\"CALLED!!!\");\n    // p5.ellipse(x, y, 100, 100);\n  }\n\n  const [spaceVals, setSpaceVals] = useState([]);\n\n  const initialArray = useEffect(() => {\n    setNodeLink([\n      ...nodeLink,\n      {\n        needsNewLine,\n        nodeID,\n        nodeValue,\n        x,\n        y,\n      },\n    ]);\n\n    console.log(nodeID);\n  }, [changer]);\n\n  const run10times = useEffect(() => {\n    if (changer < 9) {\n      //ellipse(x, y, 20, 20);\n\n      setChanger(changer + 1);\n      setNodeValue(nodeValue + 1);\n      setNodeID(nodeID + 1);\n\n      if (x < 100) {\n        setX(x + 100);\n      } else {\n        setX(1000);\n      }\n      setY(Math.floor(Math.random() * 500));\n    }\n  }, [nodeLink]);*/\n\n//Old centering code\n\n/*\n  let centerNode = null;\n    let centerNode2 = null;\n    let closestToZeroX = 0;\n    let closestToZeroY = 0;\n    let a;\n    let b;\n    for (let i = 0; i < nodeLinkHook.length; i++) {\n      a = nodeLinkHook[i].x - globalWidth / 2;\n      b = nodeLinkHook[i].y - (globalHeight * 0.8) / 2;\n      console.log(a);\n\n      if (closestToZeroX === 0) {\n        closestToZeroX = a;\n        centerNode = nodeLinkHook[i];\n      } else if (a > 0 && a <= Math.abs(closestToZeroX)) {\n        closestToZeroX = a;\n        centerNode = nodeLinkHook[i];\n      } else if (a < 0 && -a < Math.abs(closestToZeroX)) {\n        closestToZeroX = a;\n        centerNode = nodeLinkHook[i];\n      }\n\n      if (closestToZeroY === 0) {\n        closestToZeroY = b;\n        centerNode2 = nodeLinkHook[i];\n      } else if (b > 0 && b <= Math.abs(closestToZeroY)) {\n        closestToZeroY = b;\n        centerNode2 = nodeLinkHook[i];\n      } else if (b < 0 && -b < Math.abs(closestToZeroY)) {\n        closestToZeroY = b;\n        centerNode2 = nodeLinkHook[i];\n      }\n    }\n\n\n\n    let centerDecider = null;\n\n    if (centerNode.x + centerNode.y > centerNode2.x + centerNode2.y) {\n      centerDecider = centerNode;\n    } else {\n      centerDecider = centerNode2;\n    }\n\n    console.log(\"Center value: \" + centerNode.nodeValue);\n\n\n      p5.fill(p5.color(\"orange\"));\n    p5.rect(0, 0, 100, 100);\n\n    p5.fill(p5.color(\"white\")).text(centerNode.nodeValue, 0, 50);\n\n    p5.fill(p5.color(\"red\"));\n    p5.ellipse(centerNode.x, centerNode.y, centerNode.r, centerNode.r);\n    p5.fill(p5.color(\"white\")).text(\n      centerNode.nodeValue,\n      centerNode.x - centerNode.r / 4,\n      centerNode.y + centerNode.r / 6\n    );\n\n    p5.fill(p5.color(\"purple\"));\n    p5.ellipse(\n      centerDecider.x,\n      centerDecider.y,\n      centerDecider.r,\n      centerDecider.r\n    );\n    p5.fill(p5.color(\"white\")).text(\n      centerDecider.nodeValue,\n      centerDecider.x - centerDecider.r / 4,\n      centerDecider.y + centerDecider.r / 6\n    );\n\n\n    );*/\n\n//Old Connections\n\n/**\n     * let distance;\n    let smallest = 9999;\n    let nodeToAdd = null;\n    let distanceToAdd = 0;\n    let prevNodes = [];\n    let prevDist = [];\n    let doneBefore = false;\n    //trying dist;\n\n    for (let w = 0; w < numConnections - 1; w++) {\n      smallest = 9999;\n      nodeToAdd = null;\n      doneBefore = false;\n\n      for (let k = 0; k < nodeLinkHook.length; k++) {\n        //Makes sure it is not comparing against itself\n        if (k != nodeIndex) {\n          distance = parseInt(\n            p5.dist(\n              nodeLinkHook[nodeIndex].x,\n              nodeLinkHook[nodeIndex].y,\n              nodeLinkHook[k].x,\n              nodeLinkHook[k].y\n            )\n          );\n\n          //Checks if distance has been done before\n          for (let m = 0; m < prevDist.length; m++) {\n            if (distance == prevDist[m]) {\n              doneBefore = true;\n            }\n          }\n\n          //Sets smallest if not done before\n          if (Math.abs(distance) < smallest && !doneBefore) {\n            smallest = Math.abs(distance);\n            nodeToAdd = nodeLinkHook[k];\n            distanceToAdd = distance;\n          }\n        } else {\n          console.log(\"same\");\n        }\n        //End of loop\n        doneBefore = false;\n      }\n      prevNodes.push(nodeToAdd);\n      prevDist.push(distanceToAdd);\n    }\n\n    return prevNodes;\n     * \n     * \n     * * */\n\n//    /*\n//    //Canvas Variables\n// const holderRef = useRef();\n// let globalWidth;\n// let globalHeight;\n// let newCenter = null;\n\n// const [adjacencyMatrix, setAdjacencyMatrix] = useState([\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n// ]);\n\n// /* adjacencyMatrix = [\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n// ];*/\n\n// //Node Variables\n// //const [nodeLink, setNodeLink] = useState([]);\n\n// //const [nodeID, setNodeID] = useState(0);\n// //const [nodeValue, setNodeValue] = useState(23);\n// //const [x, setX] = useState(0);\n// //const [y, setY] = useState(0);\n\n// const [nodeLinkHook, setNodeLinkHook] = useState([]);\n// const [checker, setChecker] = useState(0);\n// const [center, setCenter] = useState(null);\n\n// const buildNodes = useEffect(() => {\n//   /*    let x = 100;\n//   let y = 100;\n//   let r = 100;\n//   */\n//   let screenWidth = holderRef.current.getBoundingClientRect().width;\n//   let screenHeight = holderRef.current.getBoundingClientRect().height;\n//   let nodeID = 0;\n//   let nodeValue = 47;\n//   let nodeLink = [];\n//   let protection = 0;\n\n//   while (nodeLink.length < 9) {\n//     var Node = {\n//       x: Math.floor(Math.random() * (screenWidth - 100) + 50),\n//       y: Math.floor(Math.random() * (screenHeight * 0.7 - 100) + 50),\n//       r: 80,\n//       nodeID: nodeID,\n//       nodeValue: Math.floor(Math.random() * 99),\n//       isCenter: false,\n//     };\n\n//     //Ensures never overlaps\n//     var isOverlapping = false;\n//     for (let j = 0; j < nodeLink.length; j++) {\n//       var otherNode = nodeLink[j];\n//       var a = Node.x - otherNode.x;\n//       var b = Node.y - otherNode.y;\n//       var d = Math.sqrt(a * a + b * b);\n\n//       if (d < (Node.r + otherNode.r) * 0.8) {\n//         isOverlapping = true;\n//       }\n//     }\n\n//     //If it is good, push it\n//     if (!isOverlapping) {\n//       nodeLink.push(Node);\n//       nodeID++;\n//     }\n\n//     protection++;\n//     if (protection > 100000) {\n//       console.log(\"too many circles\");\n//       break;\n//     }\n//   }\n\n//   setNodeLinkHook(nodeLink);\n// }, [checker]);\n\n// function setup(p5, canvasParentRef) {\n//   globalWidth = holderRef.current.getBoundingClientRect().width;\n//   globalHeight = holderRef.current.getBoundingClientRect().height;\n\n//   setChecker(checker + 1);\n\n//   p5.createCanvas(globalWidth, globalHeight * 0.8).parent(canvasParentRef);\n\n//   let d;\n//   let smallest = 999;\n//   let centerNode = null;\n//   //trying dist;\n//   for (let k = 0; k < nodeLinkHook.length; k++) {\n//     let d = parseInt(\n//       p5.dist(\n//         globalWidth / 2,\n//         (globalHeight * 0.8) / 2,\n//         nodeLinkHook[k].x,\n//         nodeLinkHook[k].y\n//       )\n//     );\n\n//     if (Math.abs(d) < smallest) {\n//       smallest = Math.abs(d);\n//       centerNode = nodeLinkHook[k];\n//     }\n//   }\n\n//   //Finding node closest to center;\n\n//   p5.background(\"#e3dac9\");\n\n//   p5.noStroke();\n\n//   p5.fill(p5.color(\"#72ff98\"));\n\n//   //let connections = linkMaker(p5, 3, centerNode.nodeID);\n//   linkMaker(p5, 3, centerNode.nodeID);\n\n//   //for (let m = 0; m < connections.length; m++) {\n\n//   for (let j = 0; j < nodeLinkHook.length; j++) {\n//     p5.fill(p5.color(\"#9bffb6\"));\n//     p5.ellipse(\n//       nodeLinkHook[j].x + nodeLinkHook[j].r / 4,\n//       nodeLinkHook[j].y,\n//       nodeLinkHook[j].r,\n//       nodeLinkHook[j].r\n//     );\n\n//     p5.fill(p5.color(\"#72ff98\"));\n//     p5.textSize(nodeLinkHook[j].r / 2);\n//     p5.ellipse(\n//       nodeLinkHook[j].x,\n//       nodeLinkHook[j].y,\n//       nodeLinkHook[j].r,\n//       nodeLinkHook[j].r\n//     );\n\n//     p5.fill(p5.color(\"white\")).text(\n//       nodeLinkHook[j].nodeValue,\n//       nodeLinkHook[j].x - nodeLinkHook[j].r / 4,\n//       nodeLinkHook[j].y + nodeLinkHook[j].r / 6\n//     );\n\n//     p5.fill(p5.color(\"white\")).text(\n//       nodeLinkHook[j].x,\n//       nodeLinkHook[j].x - nodeLinkHook[j].r / 4,\n//       nodeLinkHook[j].y + nodeLinkHook[j].r\n//     );\n\n//     p5.fill(p5.color(\"#72ff98\"));\n//   }\n\n//   p5.fill(p5.color(\"grey\"));\n//   p5.ellipse(centerNode.x, centerNode.y, centerNode.r, centerNode.r);\n//   p5.fill(p5.color(\"white\")).text(\n//     centerNode.nodeValue,\n//     centerNode.x - centerNode.r / 4,\n//     centerNode.y + centerNode.r / 6\n//   );\n\n//   p5.fill(p5.color(\"blue\"));\n//   p5.ellipse(globalWidth / 2, (globalHeight * 0.8) / 2, 50, 50);\n// }\n\n// function linkMaker(p5, numConnections, nodeIndex) {\n//   let distance;\n//   let smallest = 9999;\n//   let nodeToAdd = null;\n//   let indexToAdd = 0;\n//   let distanceToAdd = 0;\n//   let prevNodes = [];\n//   let prevDist = [];\n//   let doneBefore = false;\n//   //trying dist;\n\n//   for (let w = 0; w < numConnections; w++) {\n//     smallest = 9999;\n//     nodeToAdd = null;\n//     doneBefore = false;\n\n//     for (let k = 0; k < nodeLinkHook.length; k++) {\n//       //Makes sure it is not comparing against itself\n//       if (k != nodeIndex) {\n//         distance = parseInt(\n//           p5.dist(\n//             nodeLinkHook[nodeIndex].x,\n//             nodeLinkHook[nodeIndex].y,\n//             nodeLinkHook[k].x,\n//             nodeLinkHook[k].y\n//           )\n//         );\n\n//         //Checks if distance has been done before\n//         for (let m = 0; m < prevDist.length; m++) {\n//           if (distance == prevDist[m]) {\n//             doneBefore = true;\n//           }\n//         }\n\n//         //Sets smallest if not done before\n//         if (Math.abs(distance) < smallest && !doneBefore) {\n//           smallest = Math.abs(distance);\n//           nodeToAdd = nodeLinkHook[k];\n//           indexToAdd = k;\n//           distanceToAdd = distance;\n//         }\n//       } else {\n//         console.log(\"same\");\n//       }\n//       //End of loop\n//       doneBefore = false;\n//     }\n//     prevNodes.push(nodeToAdd);\n\n//     prevDist.push(distanceToAdd);\n\n//     console.log(\"nodeToadd:\", indexToAdd);\n//     console.log(\"Index:\", nodeIndex);\n//     adjacencyMatrix[indexToAdd][nodeIndex] = 1;\n//     adjacencyMatrix[nodeIndex][indexToAdd] = 1;\n//     console.log(adjacencyMatrix);\n//   }\n\n//   console.log(nodeLinkHook);\n//   //return prevNodes;\n// }\n\n// let draw = (p5) => {\n//   for (let m = 0; m < adjacencyMatrix.length; m++) {\n//     for (let k = 0; k < adjacencyMatrix.length; k++) {\n//       if (adjacencyMatrix[m][k] === 1 && adjacencyMatrix[k][m] == 1) {\n//         p5.strokeWeight(20);\n\n//         p5.stroke(\"#72ff98\");\n//         p5.line(\n//           nodeLinkHook[m].x,\n//           nodeLinkHook[m].y,\n//           nodeLinkHook[k].x,\n//           nodeLinkHook[k].y\n//         );\n//         p5.stroke(\"#9bffb6\");\n//         p5.line(\n//           nodeLinkHook[m].x + nodeLinkHook[m].r / 6,\n//           nodeLinkHook[m].y,\n//           nodeLinkHook[k].x + nodeLinkHook[m].r / 6,\n//           nodeLinkHook[k].y\n//         );\n//         p5.noStroke();\n\n//         p5.fill(p5.color(\"red\"));\n//         p5.ellipse(nodeLinkHook[m].x, nodeLinkHook[m].y / 2, 50, 50);\n//         p5.ellipse(nodeLinkHook[k].x, nodeLinkHook[k].y / 2, 50, 50);\n//       }\n//     }\n//     /* p5.strokeWeight(20);\n\n//     p5.stroke(\"#72ff98\");\n//     p5.line(centerNode.x, centerNode.y, connections[m].x, connections[m].y);\n//     p5.stroke(\"#9bffb6\");\n//     p5.line(\n//       centerNode.x + centerNode.r / 6,\n//       centerNode.y,\n//       connections[m].x + connections[m].r / 6,\n//       connections[m].y\n//     );\n//     p5.noStroke();*/\n//   }\n// };\n","/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/bfs/ArrayElement.js",[],"/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/dijkstra/Dijkstra.js",["250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288"],"import React, { useEffect, useRef, useState } from \"react\";\nimport Sketch from \"react-p5\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { ReactComponent as BackArrow } from \"../../icons/BackArrow.svg\";\nimport { Item, media, Title, TopWrapper } from \"../../Shared\";\n\nconst AlgorithmsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  height: auto;\n  width: 100%;\n  background-color: #61dafb;\n  justify-content: center;\n  align-items: center;\n  overflow-x: scroll;\n\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nconst BodyWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  background-color: white;\n  flex-grow: 20;\n  align-items: flex-start;\n  justify-content: space-evenly;\n  overflow-y: visible;\n  overflow-x: hidden;\n\n  ${media.mobile} {\n    flex-direction: column-reverse;\n    justify-content: center;\n    align-items: flex-end;\n  }\n`;\n\nconst ItemRowDescription = styled.div`\n  width: 66%;\n  background-color: transparent;\n  display: grid;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-items: center;\n  align-content: center;\n  height: auto;\n\n  margin-left: 10%;\n  width: 100vw;\n  overflow: visible;\n\n  justify-content: space-evenly;\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    margin: 0%;\n  }\n`;\n\nconst ItemRowContent = styled.div`\n  background-color: transparent;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  justify-content: center;\n\n  margin-right: 10%;\n  min-width: 40vw;\n  max-width: 40vw;\n  min-height: 100%;\n  max-height: 100%;\n\n  ${media.mobile} {\n    justify-content: center;\n    align-items: center;\n    min-width: 100%;\n\n    min-height: 47vh;\n    margin-top: \"30vh\";\n    margin: 0%;\n  }\n`;\n\nconst InputValue = styled.input`\n  border: 0;\n  background-color: #e8e8e8;\n\n  border-radius: 4vh;\n  text-align: center;\n  font-size: 4vh;\n  padding: 2vh;\n  margin-left: 1vw;\n  max-width: 10vw;\n  font-weight: bold;\n  color: #535353;\n  outline: none;\n\n  ${media.mobile} {\n    max-width: none;\n    border-radius: 2vh;\n    width: 10vh;\n    height: 2vh;\n\n    font-size: 3vh;\n  }\n`;\n\nconst AddButton = styled.div`\n  display: flex;\n  width: 30vw;\n  height: 10vh;\n  background-color: #ffe26a;\n  border-radius: 4vh;\n\n  margin-left: 2vh;\n  align-items: center;\n\n  justify-content: center;\n\n  p {\n    font-weight: bold;\n    color: white;\n    font-size: 7vh;\n  }\n\n  ${media.mobile} {\n    border-radius: 2vh;\n    width: 80vw;\n    height: 6vh;\n    margin-top: 0vh;\n\n    p {\n      font-size: 5vh;\n    }\n  }\n`;\n\nconst MinusButton = styled.div`\n  display: flex;\n  width: 10vh;\n  height: 10vh;\n  background-color: #f06449;\n  border-radius: 4vh;\n\n  margin-left: 2vh;\n  align-items: center;\n\n  justify-content: center;\n\n  p {\n    font-weight: bold;\n    color: white;\n    font-size: 7vh;\n  }\n\n  ${media.mobile} {\n    border-radius: 2vh;\n    width: 6vh;\n    height: 6vh;\n    margin-top: 0vh;\n    p {\n      font-size: 5vh;\n    }\n  }\n`;\n\nconst ControlHolder = styled.div`\n  display: flex;\n  flex-direction: row;\n  position: relative;\n  min-height: 12vh;\n  align-items: center;\n  justify-content: center;\n\n  z-index: 0;\n  background-color: transparent;\n  ${media.mobile} {\n    height: 7vh;\n    width: 100%;\n    margin-bottom: 0vh;\n  }\n`;\n\nconst BackLink = styled.div`\n  /* lets use react link */\n  padding-left: 2%;\n`;\n\nconst SketchHolder = styled.div`\n  min-width: 40vw;\n  max-width: 40vw;\n  min-height: 60vh;\n  max-height: 60vh;\n  background-color: transparent;\n\n  ${media.mobile} {\n    min-width: 100vw;\n    max-width: 100vw;\n    max-height: 40vh;\n    min-height: 40vh;\n  }\n`;\n\nconst StaticPosition = styled.div`\n  position: fixed;\n  ${media.mobile} {\n    margin-top: inherit;\n    position: relative;\n  }\n`;\n\nfunction Info(props) {\n  return (\n    <Item\n      style={{\n        backgroundColor: props.colour,\n        minHeight: \"30vh\",\n      }}\n    >\n      <h1>{props.title}</h1>\n\n      <p>{props.description}</p>\n    </Item>\n  );\n}\n\nfunction MainInfo(props) {\n  var screenSize;\n  var itemPadding;\n  if (window.innerWidth < 1024) {\n    screenSize = \"50vh\";\n    itemPadding = \"2vh\";\n  } else {\n    screenSize = \"30vh\";\n    itemPadding = \"0vh\";\n  }\n\n  return (\n    <Item\n      id=\"mainInfo\"\n      style={{\n        backgroundColor: props.colour,\n        minHeight: screenSize,\n        margin: itemPadding,\n      }}\n    >\n      <h1>{props.title}</h1>\n\n      <p>{props.description}</p>\n    </Item>\n  );\n}\n\nfunction ArrayVisDistance(props) {\n  return (\n    /////AWDAWDAWD ADD PARENT ID\n    <Item\n      id=\"visDistance\"\n      style={{ backgroundColor: props.colour, minHeight: \"15vh\" }}\n    >\n      <h2 style={{ color: \"white\" }}>{props.title}</h2>\n\n      <table style={{ width: \"80%\", borderCollapse: \"collapse\" }}>\n        <thead\n          style={{\n            color: \"white\",\n            fontSize: \"150%\",\n            fontWeight: \"bolder\",\n          }}\n        >\n          <th>0</th>\n          <th>1</th>\n          <th>2</th>\n          <th>3</th>\n          <th>4</th>\n          <th>5</th>\n          <th>6</th>\n        </thead>\n        <tr style={{ fontSize: \"150%\" }}>\n          <td id=\"D0\"></td>\n          <td id=\"D1\"></td>\n          <td id=\"D2\"></td>\n          <td id=\"D3\"></td>\n          <td id=\"D4\"></td>\n          <td id=\"D5\"></td>\n          <td id=\"D6\"></td>\n        </tr>\n      </table>\n    </Item>\n  );\n}\n\nfunction ArrayVisParents(props) {\n  return (\n    <Item\n      id=\"visParents\"\n      style={{ backgroundColor: props.colour, minHeight: \"15vh\" }}\n    >\n      <h2 style={{ color: \"white\" }}>{props.title}</h2>\n\n      <table style={{ width: \"80%\", borderCollapse: \"collapse\" }}>\n        <thead\n          style={{\n            color: \"white\",\n            fontSize: \"150%\",\n            fontWeight: \"bolder\",\n          }}\n        >\n          <th id=\"H0\">0</th>\n          <th id=\"H1\">1</th>\n          <th id=\"H2\">2</th>\n          <th id=\"H3\">3</th>\n          <th id=\"H4\">4</th>\n          <th id=\"H5\">5</th>\n          <th id=\"H6\">6</th>\n        </thead>\n        <tr style={{ fontSize: \"150%\" }}>\n          <td id=\"V0\"></td>\n          <td id=\"V1\"></td>\n          <td id=\"V2\"></td>\n          <td id=\"V3\"></td>\n          <td id=\"V4\"></td>\n          <td id=\"V5\"></td>\n          <td id=\"V6\"></td>\n        </tr>\n      </table>\n    </Item>\n  );\n}\n\nfunction Dijkstra() {\n  const [startNode, setStartNode] = useState(0);\n\n  //For refreshing screen details\n  const [dimensions, setDimensions] = React.useState({\n    height: window.innerHeight,\n    width: window.innerWidth,\n  });\n\n  //For Start/End\n\n  const [endNode, setEndNode] = useState(6);\n\n  const holderRef = useRef();\n  //Frame\n  const [globalWidth, setGlobalWidth] = useState(0);\n  const [globalHeight, setGlobalHeight] = useState(0);\n\n  //Nodes\n  const [nodeLink, setNodeLink] = useState([]);\n  const [nodeValue, setNodeValue] = useState(37);\n\n  const [nodeID, setNodeID] = useState(0);\n  const [nodeNext, setNodeNext] = useState(null);\n  const [nodeX, setNodeX] = useState(200);\n  const [nodeY, setNodeY] = useState(200);\n  const [looper, setLooper] = useState(0);\n  const [changer, setChanger] = useState(0);\n  const [matrixLoaded, setMatrixLoaded] = useState(false);\n  const [nodesSet, setNodesSet] = useState(false);\n\n  const [frameWidth, setFrameWidth] = useState();\n  const [frameHeight, setFrameHeight] = useState();\n\n  const [isRendered, setIsRendered] = useState(0);\n\n  // for animation\n  let animationTimer = 0;\n\n  const a = useEffect(() => {\n    if (holderRef.current.getBoundingClientRect().width > 0) {\n      setFrameWidth(holderRef.current.getBoundingClientRect().width);\n      setFrameHeight(holderRef.current.getBoundingClientRect().height);\n\n      for (let i = 0; i < nodeLink.length; i++) {\n        nodeLink[i].r = (frameHeight + frameWidth) / 15;\n      }\n    }\n  }, [holderRef.current, isRendered]);\n\n  const [adjacencyMatrix, setAdjacencyMatrix] = useState([\n    [0, 1, 1, 0, 0, 0, 0],\n    [1, 0, 0, 1, 1, 0, 0],\n    [1, 0, 0, 1, 0, 0, 0],\n    [0, 1, 1, 0, 0, 1, 0],\n    [0, 1, 0, 0, 0, 1, 1],\n    [0, 0, 0, 1, 1, 0, 1],\n    [0, 0, 0, 0, 1, 1, 0],\n  ]);\n\n  const [costMatrix, setCostMatrix] = useState([\n    [0, 1, 1, 0, 0, 0, 0],\n    [1, 0, 0, 1, 1, 0, 0],\n    [1, 0, 0, 1, 0, 0, 0],\n    [0, 1, 1, 0, 0, 1, 0],\n    [0, 1, 0, 0, 0, 1, 1],\n    [0, 0, 0, 1, 1, 0, 1],\n    [0, 0, 0, 0, 1, 1, 0],\n  ]);\n\n  const createNodes = useEffect(() => {\n    if (looper < 7) {\n      var Node = {\n        x: nodeX,\n        y: nodeY,\n        value: nodeValue,\n        id: nodeID,\n        r: (frameHeight + frameWidth) / 15,\n        distance: [],\n\n        colour: \"#7CED61\",\n        bgColour: \"#61D944\",\n        active: false,\n        connections: [],\n      };\n\n      setNodeLink([...nodeLink, Node]);\n\n      if (looper < 6) {\n        setChanger(changer + 1);\n      }\n    } else {\n      for (let i = 0; i < adjacencyMatrix.length; i++) {\n        for (let j = 0; j < adjacencyMatrix.length; j++) {\n          if (adjacencyMatrix[i][j] == 1 && adjacencyMatrix[j][i]) {\n            nodeLink[i].connections.push(nodeLink[j]);\n          }\n        }\n\n        /*for (let j = 0; j < nodeLink.length; j++) {\n          console.log(\"Number\", j, \": \", nodeLink[j].connections);\n        }*/\n      }\n      setMatrixLoaded(true);\n    }\n  }, [looper]);\n\n  const updateValues = useEffect(() => {\n    setNodeValue(Math.floor(Math.random() * 99));\n\n    if (looper % 2 != 0) {\n      setNodeX(nodeX + globalWidth / 10);\n    } else {\n      setNodeX(nodeX - globalWidth / 10);\n    }\n    setNodeY(nodeY + globalHeight / 8);\n    setNodeID(nodeID + 1);\n\n    setLooper(looper + 1);\n  }, [changer]);\n\n  const setNexts = useEffect(() => {\n    if (looper > 6) {\n      let temp = [...nodeLink];\n\n      for (let j = 0; j < nodeLink.length - 1; j++) {\n        temp[j].next = temp[j + 1];\n      }\n\n      setNodeLink(temp);\n    }\n  }, [looper]);\n\n  function setup(p5, canvasParentRef) {\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\n    setIsRendered(isRendered + 1);\n    setGlobalWidth(frameWidth);\n    setGlobalHeight(frameHeight);\n\n    p5.createCanvas(frameWidth, window.innerHeight).parent(canvasParentRef);\n\n    /* let newXY = [...nodeLink];\n    let currX = frameWidth / 10;\n    let currY = (frameHeight * 0.8) / 2;\n\n    for (let i = 0; i < nodeLink.length; i++) {\n      console.log(i);\n\n      if (i == 1) {\n        currX += frameWidth / 6;\n        currY -= (frameHeight * 0.8) / 4;\n      }\n      if (i == 2) {\n        currY += (frameHeight * 0.8) / 2;\n      }\n      if (i == 3) {\n        currX += frameWidth / 6;\n        currY -= (frameHeight * 0.8) / 4;\n      }\n      if (i == 4) {\n        currX += frameWidth / 6;\n        currY -= (frameHeight * 0.8) / 4;\n      }\n      if (i == 5) {\n        currY += (frameHeight * 0.8) / 2;\n      }\n      if (i == 6) {\n        currX += frameWidth / 6;\n        currY -= (frameHeight * 0.8) / 4;\n      }\n\n      nodeLink[i].x = currX;\n      nodeLink[i].y = currY;\n    }*/\n\n    //Finding node closest to center;\n\n    console.log(matrixLoaded);\n    setIsRendered(1);\n\n    //For the initial animation\n  }\n\n  function windowResized(p5) {\n    p5.resizeCanvas(\n      holderRef.current.getBoundingClientRect().width,\n      holderRef.current.getBoundingClientRect().height\n    );\n\n    for (let i = 0; i < nodeLink.length; i++) {\n      nodeLink[i].r = (frameHeight + frameWidth) / 15;\n    }\n\n    setGlobalHeight(p5.windowHeight);\n    console.log(\"resize\");\n    setDimensions({\n      height: window.innerHeight,\n      width: window.innerWidth,\n    });\n  }\n\n  function test() {}\n\n  let draw = (p5) => {\n    p5.clear();\n    p5.noStroke();\n\n    setGlobalWidth(frameWidth);\n    setGlobalHeight(frameHeight);\n    setNodesSet(true);\n    if (isRendered == 1) {\n      setIsRendered(2);\n    }\n\n    if (isRendered == 2) {\n      let currX = frameWidth / 10;\n      let currY = (frameHeight * 0.8) / 2;\n      for (let i = 0; i < nodeLink.length; i++) {\n        console.log(i);\n\n        if (i == 1) {\n          currX += frameWidth / 6;\n          currY -= (frameHeight * 0.8) / 4;\n        }\n        if (i == 2) {\n          currY += (frameHeight * 0.8) / 2;\n        }\n        if (i == 3) {\n          currX += frameWidth / 6;\n          currY -= (frameHeight * 0.8) / 4;\n        }\n        if (i == 4) {\n          currX += frameWidth / 6;\n          currY -= (frameHeight * 0.8) / 4;\n        }\n        if (i == 5) {\n          currY += (frameHeight * 0.8) / 2;\n        }\n        if (i == 6) {\n          currX += frameWidth / 6;\n          currY -= (frameHeight * 0.8) / 4;\n        }\n\n        nodeLink[i].x = currX;\n        nodeLink[i].y = currY;\n      }\n\n      setIsRendered(3);\n    }\n\n    //Creating Lines\n    for (let m = 0; m < nodeLink.length; m++) {\n      for (let w = 0; w < nodeLink[m].connections.length; w++) {\n        p5.strokeWeight(frameWidth / 30);\n\n        p5.stroke(nodeLink[m].colour);\n\n        p5.line(\n          nodeLink[m].x,\n          nodeLink[m].y,\n          nodeLink[m].connections[w].x,\n          nodeLink[m].connections[w].y\n        );\n\n        //Setting Distances;\n        //Now the graph is weighted!\n\n        nodeLink[m].distance[w] = Math.floor(\n          p5.dist(\n            nodeLink[m].x,\n            nodeLink[m].y,\n            nodeLink[m].connections[w].x,\n            nodeLink[m].connections[w].y\n          )\n        );\n\n        p5.stroke(nodeLink[m].bgColour);\n        p5.line(\n          nodeLink[m].x + nodeLink[m].r / 6,\n          nodeLink[m].y,\n          nodeLink[m].connections[w].x + nodeLink[m].r / 6,\n          nodeLink[m].connections[w].y\n        );\n      }\n\n      //building cost matrix\n      for (let k = 0; k < nodeLink.length; k++) {\n        if (adjacencyMatrix[m][k] == 1) {\n          costMatrix[m][k] = Math.floor(\n            p5.dist(nodeLink[m].x, nodeLink[m].y, nodeLink[k].x, nodeLink[k].y)\n          );\n        } else if (m != k) {\n          costMatrix[m][k] = 99999;\n        } else {\n          costMatrix[m][k] = 0;\n        }\n      }\n    }\n\n    p5.noStroke();\n\n    for (let i = 0; i < nodeLink.length; i++) {\n      //Background Circle\n      p5.fill(p5.color(nodeLink[i].bgColour));\n      p5.ellipse(\n        nodeLink[i].x + nodeLink[i].r / 6,\n        nodeLink[i].y,\n        nodeLink[i].r,\n        nodeLink[i].r\n      );\n\n      //Foreground Circle\n      p5.fill(p5.color(nodeLink[i].colour));\n      p5.ellipse(nodeLink[i].x, nodeLink[i].y, nodeLink[i].r, nodeLink[i].r);\n\n      p5.textSize(nodeLink[i].r / 2);\n      p5.fill(p5.color(\"white\")).text(\n        nodeLink[i].id,\n        nodeLink[i].x - nodeLink[i].r / 4,\n        nodeLink[i].y + nodeLink[i].r / 6\n      );\n      p5.fill(p5.color(\"#72ff98\"));\n    }\n\n    //Creating Text\n    for (let m = 0; m < nodeLink.length; m++) {\n      for (let w = 0; w < nodeLink[m].connections.length; w++) {\n        p5.noStroke();\n        p5.textSize(nodeLink[m].r / 4);\n        p5.fill(p5.color(\"#7c7c7c\")).text(\n          Math.floor(\n            p5.dist(\n              nodeLink[m].x,\n              nodeLink[m].y,\n              nodeLink[m].connections[w].x,\n              nodeLink[m].connections[w].y\n            )\n          ),\n          (nodeLink[m].x + nodeLink[m].connections[w].x) / 2 +\n            nodeLink[m].r / 6,\n          (nodeLink[m].y + nodeLink[m].connections[w].y) / 2 + nodeLink[m].r / 6\n        );\n      }\n    }\n\n    animationTimer++;\n\n    /*//intro animation\n    if (isRendered == 3 && animationTimer > 200) {\n      p5.fill(p5.color(\"#F58696\"));\n\n      p5.triangle(\n        nodeLink[2].x,\n        nodeLink[2].y + nodeLink[2].r / 5,\n        nodeLink[2].x + nodeLink[2].r / 6 + nodeLink[2].r / 8,\n        nodeLink[2].y + nodeLink[2].r * 0.8,\n        nodeLink[2].x - nodeLink[2].r / 6,\n        nodeLink[2].y + nodeLink[2].r * 1\n      );\n\n      p5.fill(p5.color(\"#FFA5B2\"));\n      p5.triangle(\n        nodeLink[2].x,\n        nodeLink[2].y + nodeLink[2].r / 5,\n        nodeLink[2].x + nodeLink[2].r / 6,\n        nodeLink[2].y + nodeLink[2].r * 0.8,\n        nodeLink[2].x - nodeLink[2].r / 6,\n        nodeLink[2].y + nodeLink[2].r * 1\n      );\n\n      p5.fill(p5.color(\"#FFA5B2\"));\n      p5.triangle(\n        nodeLink[2].x,\n        nodeLink[2].y + nodeLink[2].r / 5,\n        nodeLink[2].x + nodeLink[2].r / 6,\n        nodeLink[2].y + nodeLink[2].r * 0.8,\n        nodeLink[2].x - nodeLink[2].r / 6,\n        nodeLink[2].y + nodeLink[2].r * 1\n      );\n\n      // p5.ellipse(\n      //  nodeLink[2].x + nodeLink[2].r / 6,\n      //  nodeLink[2].y,\n      //  nodeLink[2].r,\n      //  nodeLink[2].r\n      //);\n\n      if (nodeLink[2].x > frameWidth / 12) {\n        nodeLink[2].x--;\n      }\n      if (nodeLink[2].y < frameHeight * 0.8) {\n        nodeLink[2].y++;\n      } else {\n        setIsRendered(4);\n      }\n    }*/\n  };\n\n  const [startValue, setStartValue] = useState(0);\n  const [endValue, setEndValue] = useState(6);\n\n  async function dijkstras() {\n    if (startNode > 6 || startNode < 0 || endNode > 6 || endNode < 0) {\n      document.getElementById(\"taskDescription\").innerHTML =\n        \"please input a valid node to find!\";\n\n      return;\n    }\n\n    for (let m = 0; m < nodeLink.length; m++) {\n      nodeLink[m].colour = \"#7CED61\";\n      nodeLink[m].bgColour = \"#61D944\";\n    }\n    //Visiting\n    let visited = [];\n    let parent = [];\n\n    //Distance\n    let infinity = 99999;\n    let distFromStart = [];\n    let nearestNode = startNode; //startValue;\n\n    //For finding nearest\n    let minValue = 99999;\n    let minNode = 0;\n\n    for (let m = 0; m < nodeLink.length; m++) {\n      //Will change this to a variable to change the input\n      if (m == nearestNode) {\n        distFromStart.push(0);\n        parent[nearestNode] = -1;\n        document.getElementById(\"D\" + m).innerHTML = \"0\";\n        document.getElementById(\"V\" + m).innerHTML = \"-1\";\n      } else {\n        distFromStart.push(infinity);\n        document.getElementById(\"D\" + m).innerHTML = \"∞\";\n        parent[m] = m;\n        document.getElementById(\"V\" + m).innerHTML = \"?\";\n      }\n\n      //Sets everything to unvisited\n      visited[m] = false;\n\n      //sets all parents to themselves\n\n      await sleep(500);\n    }\n\n    let highlightDistance = document.getElementById(\"visDistance\");\n    let highlightParents = document.getElementById(\"visParents\");\n\n    let highlightInstruction = document.getElementById(\"mainInfo\");\n\n    let Q = [];\n\n    //Adding initial node\n    Q.push(nearestNode);\n\n    //Priority queue for Dijkstra\n    while (Q.length > 0) {\n      //Take node with least distance\n      let e = Q.shift();\n      document.getElementById(\"queue\").innerHTML = \"queue: [\" + Q + \"]\";\n      sleep(500);\n      visited[e] = true;\n      nodeLink[e].colour = \"#f2be3a\";\n      nodeLink[e].bgColour = \"#c99b24\";\n      sleep(2000);\n\n      if (e == endNode) {\n        document.getElementById(\"taskDescription\").innerHTML =\n          '<p style=\"font-size:30px; text-align: center; padding: 0px; margin: 0px\">' +\n          \"target node found!\" +\n          \"</p>\";\n        await sleep(3000);\n        break;\n      }\n\n      console.log(\"active: \", e);\n      console.log(\"queue: \", Q);\n\n      for (let i = 0; i < adjacencyMatrix.length; i++) {\n        //if connected\n        if (adjacencyMatrix[e][i] == 1) {\n          //if not visited\n          if (visited[i] == false && !Q.includes(i)) {\n            //add to queue\n            Q.push(i);\n\n            //Animaiton\n            await sleep(1000);\n            //increasing font size and turning purple with instruction\n            document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n            document.getElementById(\"taskDescription\").style.transition =\n              \"font-size 1000ms ease\";\n            document.getElementById(\"taskDescription\").innerHTML =\n              \"adding to queue: \" +\n              '<p style=\"font-size:30px; text-align: center; padding: 0px; margin: 0px\">' +\n              i +\n              \"</p>\";\n            highlightInstruction.style.transition =\n              \"background-color 1000ms ease\";\n            highlightInstruction.style.backgroundColor = \"#7d34eb\";\n            await sleep(1500);\n            Q.sort((a, b) => (distFromStart[a] >= distFromStart[b] ? 1 : -1));\n            document.getElementById(\"queue\").innerHTML = \"queue: [\" + Q + \"]\";\n            nodeLink[i].colour = \"#7d34eb\";\n            nodeLink[i].bgColour = \"#5e1dbf\";\n            await sleep(2500);\n            highlightInstruction.style.backgroundColor = \"#F06449\";\n            document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n            //check the distance\n            let testDistance = distFromStart[e] + costMatrix[i][e];\n            //If it is better than before, update\n            if (testDistance < distFromStart[i]) {\n              parent[i] = e;\n              distFromStart[i] = testDistance;\n\n              //Updating distance animation\n              document.getElementById(\"D\" + i).innerHTML = distFromStart[i];\n\n              document.getElementById(\"D\" + i).style.fontSize = \"200%\";\n              document.getElementById(\"D\" + i).style.transition =\n                \"font-size 1000ms ease\";\n              highlightDistance.style.transition =\n                \"background-color 1000ms ease\";\n              highlightDistance.style.backgroundColor = \"#7d34eb\";\n              await sleep(1500);\n              highlightDistance.style.backgroundColor = \"#F06449\";\n              document.getElementById(\"D\" + i).style.fontSize = \"100%\";\n\n              //Updating parent animationprom\n\n              document.getElementById(\"V\" + i).innerHTML = parent[i];\n\n              document.getElementById(\"V\" + i).style.fontSize = \"200%\";\n              document.getElementById(\"V\" + i).style.transition =\n                \"font-size 1000ms ease\";\n              highlightParents.style.transition =\n                \"background-color 1000ms ease\";\n              highlightParents.style.backgroundColor = \"#7d34eb\";\n              await sleep(1500);\n              highlightParents.style.backgroundColor = \"#F06449\";\n              document.getElementById(\"V\" + i).style.fontSize = \"100%\";\n              await sleep(1500);\n            }\n          }\n        }\n      }\n\n      //out of adjacencies\n      document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n      document.getElementById(\"taskDescription\").style.transition =\n        \"font-size 1000ms ease\";\n      document.getElementById(\"taskDescription\").innerHTML =\n        \"there are no more connections <br/> to explore for node \" +\n        '<p style=\"font-size:30px; text-align: center; padding: 0px; margin: 0px\">' +\n        e +\n        \"</p>\";\n      highlightInstruction.style.transition = \"background-color 1000ms ease\";\n      highlightInstruction.style.backgroundColor = \"#f2be3a\";\n      await sleep(4500);\n\n      if (Q.length > 0) {\n        document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n        document.getElementById(\"taskDescription\").style.transition =\n          \"font-size 1000ms ease\";\n        document.getElementById(\"taskDescription\").innerHTML =\n          \"node with shortest distance from start: \" +\n          '<p style=\"font-size:30px; text-align: center; padding: 0px; margin: 0px\">' +\n          Q[0] +\n          \"</p>\";\n\n        highlightInstruction.style.transition = \"background-color 1000ms ease\";\n        highlightInstruction.style.backgroundColor = \"#f2be3a\";\n        await sleep(2500);\n        //nodeLink[Q[0]].colour = \"#344feb\";\n        //nodeLink[Q[0]].bgColour = \"#243cc7\";\n        await sleep(2500);\n        nodeLink[e].colour = \"#737894\";\n        nodeLink[e].bgColour = \"#50525e\";\n      }\n    }\n\n    for (let i = 0; i < nodeLink.length; i++) {\n      /*\n      //Getting the nearest node:\n\n      //increasing font size and turning purple with instruction\n      document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n      document.getElementById(\"taskDescription\").style.transition =\n        \"font-size 1000ms ease\";\n      document.getElementById(\"taskDescription\").innerHTML =\n        \"found smallest distance from start: \" +\n        '<p style=\"font-size:30px; text-align: center; padding: 0px; margin: 0px\">' +\n        i +\n        \"</p>\";\n      highlightInstruction.style.transition = \"background-color 1000ms ease\";\n      highlightInstruction.style.backgroundColor = \"#7d34eb\";\n      await sleep(1500);\n      nodeLink[i].colour = \"#7d34eb\";\n      nodeLink[i].bgColour = \"#5e1dbf\";\n      await sleep(3500);\n      highlightInstruction.style.backgroundColor = \"#F06449\";\n      document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n      for (let j = 0; j < nodeLink.length; j++) {\n        if (!visited[j] && distFromStart[j] < minValue) {\n          minValue = distFromStart[j];\n          minNode = j;\n          //nodeLink[j].colour = \"orange\";\n          //document.getElementById(\"taskDescription\").innerHTML =\n          //  \"updating: current distance is better <br/> than previous distance\";\n\n          document.getElementById(\"D\" + minNode).innerHTML = minValue;\n\n          document.getElementById(\"D\" + minNode).style.fontSize = \"200%\";\n          document.getElementById(\"D\" + minNode).style.transition =\n            \"font-size 1000ms ease\";\n          highlightDistance.style.transition = \"background-color 1000ms ease\";\n          highlightDistance.style.backgroundColor = \"#7d34eb\";\n          await sleep(3000);\n          highlightDistance.style.backgroundColor = \"#F06449\";\n          document.getElementById(\"D\" + minNode).style.fontSize = \"100%\";\n          if (minNode != 0) {\n            document.getElementById(\"V\" + minNode).innerHTML = parent[minNode];\n          }\n          document.getElementById(\"V\" + minNode).style.fontSize = \"200%\";\n          document.getElementById(\"V\" + minNode).style.transition =\n            \"font-size 1000ms ease\";\n          highlightParents.style.transition = \"background-color 1000ms ease\";\n          highlightParents.style.backgroundColor = \"#7d34eb\";\n          await sleep(3500);\n          highlightParents.style.backgroundColor = \"#F06449\";\n          document.getElementById(\"V\" + minNode).style.fontSize = \"100%\";\n          await sleep(2500);\n        }\n      }\n\n      visited[minNode] = true;\n\n      //updating distance;\n      for (let adj = 0; adj < nodeLink.length; adj++) {\n        //Checks if the previous distance is already smaller than the new distance\n        //Which is the distance to reach nearest PLUS cost of going from nearest to adjacent\n\n        if (\n          !visited[adj] &&\n          distFromStart[minNode] + costMatrix[minNode][adj] <\n            distFromStart[adj] &&\n          costMatrix[minNode][adj] != 99999\n        ) {\n          //update\n\n          distFromStart[adj] =\n            distFromStart[minNode] + costMatrix[minNode][adj];\n\n          parent[adj] = minNode;\n\n          document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n          document.getElementById(\"taskDescription\").style.transition =\n            \"font-size 1000ms ease\";\n          document.getElementById(\"taskDescription\").innerHTML =\n            \"exploring connections of most recently <br/>visited node (\" +\n            minNode +\n            \") to find the smallest <br/>distance from the start\";\n          highlightInstruction.style.transition =\n            \"background-color 1000ms ease\";\n          highlightInstruction.style.backgroundColor = \"#344feb\";\n          await sleep(4500);\n          nodeLink[adj].colour = \"#344feb\";\n          nodeLink[adj].bgColour = \"#243cc7\";\n          await sleep(2500);\n\n          highlightInstruction.style.backgroundColor = \"#F06449\";\n          document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n          document.getElementById(\"D\" + minNode).innerHTML = minValue;\n          await sleep(1000);\n\n          console.log(minNode);\n        }\n      }\n\n      minValue = 99999;\n      minNode = 0;\n      */\n    }\n\n    let order = [];\n\n    /*     Describing Order      */\n    document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n    document.getElementById(\"taskDescription\").style.transition =\n      \"font-size 1000ms ease\";\n    document.getElementById(\"taskDescription\").innerHTML =\n      \"starting at the target node, we <br/> run back along the parents <br/> to find the final shortest path\";\n    highlightInstruction.style.transition = \"background-color 1000ms ease\";\n    highlightInstruction.style.backgroundColor = \"#f2be3a\";\n    await sleep(1500);\n    document.getElementById(\"queue\").innerHTML = \"order: [\" + order + \"]\";\n    await sleep(2500);\n    highlightInstruction.style.backgroundColor = \"#F06449\";\n    document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n    let n = endNode; //nodeLink.length - 1;\n    while (n != startNode) {\n      order.push(n);\n      n = parent[n];\n      document.getElementById(\"queue\").innerHTML = \"order: [\" + order + \"]\";\n      await sleep(1000);\n    }\n    order.push(nearestNode);\n    document.getElementById(\"queue\").innerHTML = \"order: [\" + order + \"]\";\n    await sleep(1000);\n\n    document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n    document.getElementById(\"taskDescription\").style.transition =\n      \"font-size 1000ms ease\";\n    document.getElementById(\"taskDescription\").innerHTML =\n      \"the order is reversed so we start <br/> at the right place\";\n    highlightInstruction.style.transition = \"background-color 1000ms ease\";\n    highlightInstruction.style.backgroundColor = \"#f2be3a\";\n    await sleep(1500);\n    document.getElementById(\"queue\").innerHTML = \"order: [\" + order + \"]\";\n    await sleep(1500);\n    highlightInstruction.style.backgroundColor = \"#F06449\";\n    document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n    order.reverse();\n    console.log(order);\n\n    document.getElementById(\"queue\").innerHTML = \"order: [\" + order + \"]\";\n    await sleep(1500);\n\n    document.getElementById(\"taskDescription\").style.fontSize = \"120%\";\n    document.getElementById(\"taskDescription\").style.transition =\n      \"font-size 1000ms ease\";\n    document.getElementById(\"taskDescription\").innerHTML =\n      \"now, we simply run through <br/> the order\";\n    highlightInstruction.style.transition = \"background-color 1000ms ease\";\n    highlightInstruction.style.backgroundColor = \"#f2be3a\";\n    await sleep(1500);\n    document.getElementById(\"queue\").innerHTML = \"order: [\" + order + \"]\";\n    await sleep(1500);\n    highlightInstruction.style.backgroundColor = \"#F06449\";\n    document.getElementById(\"taskDescription\").style.fontSize = \"100%\";\n\n    for (let f = 0; f < order.length; f++) {\n      nodeLink[order[f]].colour = \"#F52F2F\";\n      nodeLink[order[f]].bgColour = \"#F66161\";\n      document.getElementById(\"H\" + order[f]).style.transition =\n        \"font-size 1000ms ease\";\n      document.getElementById(\"H\" + order[f]).style.fontSize = \"200%\";\n\n      await sleep(1500);\n      document.getElementById(\"H\" + order[f]).style.fontSize = \"100%\";\n\n      await sleep(1500);\n    }\n\n    console.log(\"DFS: \", distFromStart);\n    console.log(\"VIS: \", visited);\n    console.log(\"PAR\", parent);\n  }\n\n  function sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  function mouseWheel(event) {\n    console.log(event);\n    if (event.mouseX > 0 && event.mouseY > 0) {\n      for (let m = 0; m < nodeLink.length; m++) {\n        nodeLink[m].y += event._mouseWheelDeltaY / 8;\n      }\n\n      setNodeY(nodeLink[nodeLink.length - 1].y + globalHeight / 8);\n    }\n  }\n\n  const [mouseCurrentY, setMouseCurrentY] = useState();\n\n  function mousePressed(p5) {\n    for (let m = 0; m < nodeLink.length; m++) {\n      console.log(nodeLink[m].active);\n    }\n    setMouseCurrentY(p5.mouseY);\n    return false;\n  }\n\n  function mouseDragged(p5) {\n    let isMovingObject = false;\n\n    let distance;\n    for (let i = 0; i < nodeLink.length; i++) {\n      distance = p5.dist(p5.mouseX, p5.mouseY, nodeLink[i].x, nodeLink[i].y);\n\n      if (distance < nodeLink[i].r) {\n        nodeLink[i].active = true;\n        isMovingObject = true;\n\n        document.body.style.overflow = \"hidden\";\n      }\n    }\n    if (isMovingObject == true) {\n      for (let i = 0; i < nodeLink.length; i++) {\n        if (nodeLink[i].active) {\n          nodeLink[i].x = p5.mouseX;\n          nodeLink[i].y = p5.mouseY;\n          break;\n        }\n      }\n    }\n\n    if (!isMovingObject) {\n      if (window.innerWidth > 1000) {\n        if (p5.mouseX > 0 && p5.mouseY > 0) {\n          document.body.style.overflow = \"hidden\";\n\n          for (let i = 0; i < nodeLink.length; i++) {\n            if (p5.mouseY < mouseCurrentY) {\n              nodeLink[i].y += p5.mouseX / 50;\n            } else {\n              nodeLink[i].y -= p5.mouseX / 50;\n            }\n          }\n        }\n      } else {\n        if (p5.mouseY < frameHeight) {\n          document.body.style.overflow = \"hidden\";\n          for (let i = 0; i < nodeLink.length; i++) {\n            if (p5.mouseY < mouseCurrentY) {\n              nodeLink[i].y += p5.mouseX / 100;\n            } else {\n              nodeLink[i].y -= p5.mouseX / 100;\n            }\n          }\n        }\n      }\n\n      setNodeY(nodeLink[nodeLink.length - 1].y + globalHeight / 8);\n    }\n\n    return false;\n  }\n\n  function mouseReleased(p5) {\n    for (let i = 0; i < nodeLink.length; i++) {\n      if (nodeLink[i].active) {\n        nodeLink[i].active = false;\n      }\n    }\n    document.body.style.overflow = \"auto\";\n  }\n\n  return (\n    <AlgorithmsWrapper className=\"BFS\">\n      <TopWrapper>\n        <BackLink as={Link} to=\"/algorithms\">\n          <BackArrow />\n        </BackLink>\n\n        <Title>dijkstra's algorithm</Title>\n      </TopWrapper>\n      <BodyWrapper>\n        <ItemRowDescription>\n          <MainInfo\n            colour=\"#F06449\"\n            title=\"dijkstra's\"\n            description={\n              <div>\n                <p\n                  id=\"taskDescription\"\n                  style={{\n                    textAlign: \"center\",\n                    fontSize: \"18px\",\n                    minHeight: \"5vh\",\n                    maxHeight: \"5vh\",\n                  }}\n                >\n                  finds the shortest path from <br />\n                  one point to another.\n                  <br />\n                  <br />\n                  drag nodes to change their location.\n                </p>\n                <p\n                  id=\"queue\"\n                  style={{\n                    margin: \"0px\",\n                    marginTop: \"1vh\",\n                    padding: \"0px\",\n                    textAlign: \"center\",\n                    fontSize: \"120%\",\n                  }}\n                ></p>\n              </div>\n            }\n          />\n          <ArrayVisDistance\n            colour=\"#F06449\"\n            title=\"distance from start\"\n            description={\n              <div>0 &emsp; 1 &emsp; 2 &emsp; 3 &emsp; 4 &emsp; 5 &emsp; 6</div>\n            }\n          />\n          <ArrayVisParents\n            colour=\"#F06449\"\n            title=\"parents array\"\n            description={<div></div>}\n          />\n          <Info\n            colour=\"#6DD3CE\"\n            title=\"use cases\"\n            description={\n              <div>\n                <p>\n                  dijkstra's algorithm is incredibly useful for any time the\n                  shortest path needs to be found when the distances between\n                  nodes are known.\n                  <br />\n                  <br />\n                  the most obvious real-world example is google maps: every\n                  location is a node, and the distances between them are real\n                  distances, like miles or kilometers. finding the shortest path\n                  between two places can be done using this algorithm.\n                </p>\n              </div>\n            }\n          />\n          <Info\n            colour=\"#FFA5B2\"\n            title=\"cost\"\n            description={\n              <div>\n                <p>\n                  dijkstra's algorithm: O(V^2)\n                  <br />\n                  <br />\n                  where V is the number of vertices, or nodes. this is because\n                  every node needs to be looked at (V), and then all of its\n                  connections needs to be looked at (V), leaving (V*V).\n                  different optimisations, such as using a min-heap as a\n                  priority queue can reduce this to:\n                  <br />\n                  <br />\n                  dijkstra's algorithm (min-heap): O((V+E) log V)\n                  <br />\n                  <br />\n                  where E is the amount of edges, or connections between nodes.\n                </p>\n              </div>\n            }\n          />\n        </ItemRowDescription>\n        <ItemRowContent>\n          <StaticPosition>\n            <SketchHolder id=\"IRC\" ref={holderRef}>\n              {frameWidth < 1 && (\n                <Sketch\n                  setup={test}\n                  draw={draw}\n                  windowResized={windowResized}\n                  mouseWheel={mouseWheel}\n                  mousePressed={mousePressed}\n                  mouseDragged={mouseDragged}\n                  mouseReleased={mouseReleased}\n                  purple={dimensions}\n                />\n              )}\n              {frameWidth > 1 && (\n                <Sketch\n                  setup={setup}\n                  draw={draw}\n                  windowResized={windowResized}\n                  mouseWheel={mouseWheel}\n                  mousePressed={mousePressed}\n                  mouseDragged={mouseDragged}\n                  mouseReleased={mouseReleased}\n                />\n              )}\n            </SketchHolder>\n            <ControlHolder>\n              {/* <InputValue\n              placeholder=\"start\"\n              onChange={(event) => setStartValue(event.target.value)}\n            />\n            <InputValue\n              placeholder=\"end\"\n              onChange={(event) => setEndValue(event.target.value)}\n           />*/}\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  paddingBottom: \"2vh\",\n                }}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"center\",\n                    paddingBottom: \"2vh\",\n                  }}\n                >\n                  <InputValue\n                    placeholder=\"from\"\n                    onChange={(event) => setStartNode(event.target.value)}\n                  />\n                  <InputValue\n                    placeholder=\"to\"\n                    onChange={(event) => setEndNode(event.target.value)}\n                  />\n                </div>\n                <AddButton onClick={() => dijkstras()}>\n                  <p>start</p>\n                </AddButton>\n              </div>\n            </ControlHolder>\n          </StaticPosition>\n        </ItemRowContent>\n      </BodyWrapper>\n    </AlgorithmsWrapper>\n  );\n}\n\nexport default Dijkstra;\n","/Users/josiahwhite/unicode/ayds2/src/Pages/algorithms/dijkstra/ArrayElement.js",[],"/Users/josiahwhite/unicode/ayds2/src/serviceWorker.js",[],{"ruleId":"289","replacedBy":"290"},{"ruleId":"291","replacedBy":"292"},{"ruleId":"293","severity":1,"message":"294","line":3,"column":29,"nodeType":"295","messageId":"296","endLine":3,"endColumn":33},{"ruleId":"293","severity":1,"message":"297","line":1,"column":16,"nodeType":"295","messageId":"296","endLine":1,"endColumn":26},{"ruleId":"293","severity":1,"message":"298","line":151,"column":10,"nodeType":"295","messageId":"296","endLine":151,"endColumn":20},{"ruleId":"293","severity":1,"message":"297","line":1,"column":16,"nodeType":"295","messageId":"296","endLine":1,"endColumn":26},{"ruleId":"293","severity":1,"message":"297","line":1,"column":16,"nodeType":"295","messageId":"296","endLine":1,"endColumn":26},{"ruleId":"293","severity":1,"message":"299","line":173,"column":7,"nodeType":"295","messageId":"296","endLine":173,"endColumn":17},{"ruleId":"293","severity":1,"message":"300","line":256,"column":10,"nodeType":"295","messageId":"296","endLine":256,"endColumn":18},{"ruleId":"293","severity":1,"message":"301","line":256,"column":20,"nodeType":"295","messageId":"296","endLine":256,"endColumn":31},{"ruleId":"293","severity":1,"message":"302","line":269,"column":9,"nodeType":"295","messageId":"296","endLine":269,"endColumn":10},{"ruleId":"303","severity":1,"message":"304","line":278,"column":6,"nodeType":"305","endLine":278,"endColumn":37,"suggestions":"306"},{"ruleId":"293","severity":1,"message":"307","line":280,"column":9,"nodeType":"295","messageId":"296","endLine":280,"endColumn":20},{"ruleId":"303","severity":1,"message":"308","line":299,"column":6,"nodeType":"305","endLine":299,"endColumn":14,"suggestions":"309"},{"ruleId":"293","severity":1,"message":"310","line":301,"column":9,"nodeType":"295","messageId":"296","endLine":301,"endColumn":21},{"ruleId":"311","severity":1,"message":"312","line":305,"column":20,"nodeType":"313","messageId":"314","endLine":305,"endColumn":22},{"ruleId":"303","severity":1,"message":"315","line":314,"column":6,"nodeType":"305","endLine":314,"endColumn":15,"suggestions":"316"},{"ruleId":"293","severity":1,"message":"317","line":316,"column":9,"nodeType":"295","messageId":"296","endLine":316,"endColumn":17},{"ruleId":"303","severity":1,"message":"318","line":326,"column":6,"nodeType":"305","endLine":326,"endColumn":14,"suggestions":"319"},{"ruleId":"293","severity":1,"message":"320","line":341,"column":9,"nodeType":"295","messageId":"296","endLine":341,"endColumn":21},{"ruleId":"311","severity":1,"message":"321","line":380,"column":20,"nodeType":"313","messageId":"314","endLine":380,"endColumn":22},{"ruleId":"293","severity":1,"message":"322","line":381,"column":11,"nodeType":"295","messageId":"296","endLine":381,"endColumn":16},{"ruleId":"311","severity":1,"message":"321","line":390,"column":19,"nodeType":"313","messageId":"314","endLine":390,"endColumn":21},{"ruleId":"293","severity":1,"message":"323","line":475,"column":9,"nodeType":"295","messageId":"296","endLine":475,"endColumn":16},{"ruleId":"311","severity":1,"message":"321","line":478,"column":33,"nodeType":"313","messageId":"314","endLine":478,"endColumn":35},{"ruleId":"311","severity":1,"message":"321","line":487,"column":25,"nodeType":"313","messageId":"314","endLine":487,"endColumn":27},{"ruleId":"293","severity":1,"message":"324","line":3,"column":10,"nodeType":"295","messageId":"296","endLine":3,"endColumn":18},{"ruleId":"293","severity":1,"message":"325","line":91,"column":7,"nodeType":"295","messageId":"296","endLine":91,"endColumn":24},{"ruleId":"293","severity":1,"message":"326","line":112,"column":7,"nodeType":"295","messageId":"296","endLine":112,"endColumn":17},{"ruleId":"293","severity":1,"message":"327","line":113,"column":7,"nodeType":"295","messageId":"296","endLine":113,"endColumn":21},{"ruleId":"293","severity":1,"message":"328","line":1,"column":18,"nodeType":"295","messageId":"296","endLine":1,"endColumn":27},{"ruleId":"293","severity":1,"message":"329","line":3,"column":7,"nodeType":"295","messageId":"296","endLine":3,"endColumn":20},{"ruleId":"293","severity":1,"message":"330","line":19,"column":7,"nodeType":"295","messageId":"296","endLine":19,"endColumn":30},{"ruleId":"293","severity":1,"message":"297","line":1,"column":16,"nodeType":"295","messageId":"296","endLine":1,"endColumn":26},{"ruleId":"293","severity":1,"message":"331","line":139,"column":7,"nodeType":"295","messageId":"296","endLine":139,"endColumn":18},{"ruleId":"293","severity":1,"message":"332","line":264,"column":10,"nodeType":"295","messageId":"296","endLine":264,"endColumn":23},{"ruleId":"293","severity":1,"message":"333","line":264,"column":25,"nodeType":"295","messageId":"296","endLine":264,"endColumn":41},{"ruleId":"293","severity":1,"message":"334","line":265,"column":10,"nodeType":"295","messageId":"296","endLine":265,"endColumn":23},{"ruleId":"293","severity":1,"message":"335","line":265,"column":25,"nodeType":"295","messageId":"296","endLine":265,"endColumn":41},{"ruleId":"293","severity":1,"message":"336","line":284,"column":10,"nodeType":"295","messageId":"296","endLine":284,"endColumn":19},{"ruleId":"293","severity":1,"message":"337","line":284,"column":21,"nodeType":"295","messageId":"296","endLine":284,"endColumn":33},{"ruleId":"293","severity":1,"message":"338","line":286,"column":26,"nodeType":"295","messageId":"296","endLine":286,"endColumn":43},{"ruleId":"293","severity":1,"message":"339","line":292,"column":9,"nodeType":"295","messageId":"296","endLine":292,"endColumn":21},{"ruleId":"303","severity":1,"message":"340","line":311,"column":6,"nodeType":"305","endLine":311,"endColumn":15,"suggestions":"341"},{"ruleId":"293","severity":1,"message":"342","line":313,"column":9,"nodeType":"295","messageId":"296","endLine":313,"endColumn":18},{"ruleId":"311","severity":1,"message":"321","line":314,"column":17,"nodeType":"313","messageId":"314","endLine":314,"endColumn":19},{"ruleId":"303","severity":1,"message":"343","line":321,"column":6,"nodeType":"305","endLine":321,"endColumn":17,"suggestions":"344"},{"ruleId":"311","severity":1,"message":"321","line":327,"column":52,"nodeType":"313","messageId":"314","endLine":327,"endColumn":54},{"ruleId":"293","severity":1,"message":"345","line":335,"column":9,"nodeType":"295","messageId":"296","endLine":335,"endColumn":20},{"ruleId":"303","severity":1,"message":"346","line":343,"column":6,"nodeType":"305","endLine":343,"endColumn":20,"suggestions":"347"},{"ruleId":"293","severity":1,"message":"297","line":1,"column":16,"nodeType":"295","messageId":"296","endLine":1,"endColumn":26},{"ruleId":"293","severity":1,"message":"331","line":141,"column":7,"nodeType":"295","messageId":"296","endLine":141,"endColumn":18},{"ruleId":"293","severity":1,"message":"348","line":315,"column":10,"nodeType":"295","messageId":"296","endLine":315,"endColumn":22},{"ruleId":"293","severity":1,"message":"349","line":315,"column":24,"nodeType":"295","messageId":"296","endLine":315,"endColumn":39},{"ruleId":"293","severity":1,"message":"350","line":317,"column":10,"nodeType":"295","messageId":"296","endLine":317,"endColumn":23},{"ruleId":"293","severity":1,"message":"351","line":317,"column":25,"nodeType":"295","messageId":"296","endLine":317,"endColumn":41},{"ruleId":"293","severity":1,"message":"352","line":318,"column":10,"nodeType":"295","messageId":"296","endLine":318,"endColumn":23},{"ruleId":"293","severity":1,"message":"353","line":318,"column":25,"nodeType":"295","messageId":"296","endLine":318,"endColumn":41},{"ruleId":"293","severity":1,"message":"354","line":320,"column":10,"nodeType":"295","messageId":"296","endLine":320,"endColumn":22},{"ruleId":"293","severity":1,"message":"355","line":320,"column":24,"nodeType":"295","messageId":"296","endLine":320,"endColumn":39},{"ruleId":"293","severity":1,"message":"356","line":322,"column":22,"nodeType":"295","messageId":"296","endLine":322,"endColumn":35},{"ruleId":"293","severity":1,"message":"357","line":323,"column":22,"nodeType":"295","messageId":"296","endLine":323,"endColumn":35},{"ruleId":"293","severity":1,"message":"358","line":324,"column":24,"nodeType":"295","messageId":"296","endLine":324,"endColumn":39},{"ruleId":"293","severity":1,"message":"359","line":325,"column":29,"nodeType":"295","messageId":"296","endLine":325,"endColumn":49},{"ruleId":"293","severity":1,"message":"360","line":327,"column":17,"nodeType":"295","messageId":"296","endLine":327,"endColumn":25},{"ruleId":"293","severity":1,"message":"361","line":342,"column":28,"nodeType":"295","messageId":"296","endLine":342,"endColumn":47},{"ruleId":"293","severity":1,"message":"336","line":343,"column":10,"nodeType":"295","messageId":"296","endLine":343,"endColumn":19},{"ruleId":"293","severity":1,"message":"337","line":343,"column":21,"nodeType":"295","messageId":"296","endLine":343,"endColumn":33},{"ruleId":"293","severity":1,"message":"338","line":345,"column":26,"nodeType":"295","messageId":"296","endLine":345,"endColumn":43},{"ruleId":"311","severity":1,"message":"321","line":367,"column":33,"nodeType":"313","messageId":"314","endLine":367,"endColumn":35},{"ruleId":"293","severity":1,"message":"339","line":534,"column":9,"nodeType":"295","messageId":"296","endLine":534,"endColumn":21},{"ruleId":"303","severity":1,"message":"362","line":547,"column":6,"nodeType":"305","endLine":547,"endColumn":15,"suggestions":"363"},{"ruleId":"293","severity":1,"message":"364","line":549,"column":9,"nodeType":"295","messageId":"296","endLine":549,"endColumn":19},{"ruleId":"311","severity":1,"message":"321","line":550,"column":17,"nodeType":"313","messageId":"314","endLine":550,"endColumn":19},{"ruleId":"303","severity":1,"message":"343","line":557,"column":6,"nodeType":"305","endLine":557,"endColumn":17,"suggestions":"365"},{"ruleId":"293","severity":1,"message":"297","line":1,"column":16,"nodeType":"295","messageId":"296","endLine":1,"endColumn":26},{"ruleId":"293","severity":1,"message":"348","line":267,"column":10,"nodeType":"295","messageId":"296","endLine":267,"endColumn":22},{"ruleId":"293","severity":1,"message":"349","line":267,"column":24,"nodeType":"295","messageId":"296","endLine":267,"endColumn":39},{"ruleId":"293","severity":1,"message":"350","line":271,"column":10,"nodeType":"295","messageId":"296","endLine":271,"endColumn":23},{"ruleId":"293","severity":1,"message":"351","line":271,"column":25,"nodeType":"295","messageId":"296","endLine":271,"endColumn":41},{"ruleId":"293","severity":1,"message":"352","line":272,"column":10,"nodeType":"295","messageId":"296","endLine":272,"endColumn":23},{"ruleId":"293","severity":1,"message":"353","line":272,"column":25,"nodeType":"295","messageId":"296","endLine":272,"endColumn":41},{"ruleId":"293","severity":1,"message":"354","line":274,"column":10,"nodeType":"295","messageId":"296","endLine":274,"endColumn":22},{"ruleId":"293","severity":1,"message":"355","line":274,"column":24,"nodeType":"295","messageId":"296","endLine":274,"endColumn":39},{"ruleId":"293","severity":1,"message":"356","line":276,"column":22,"nodeType":"295","messageId":"296","endLine":276,"endColumn":35},{"ruleId":"293","severity":1,"message":"357","line":277,"column":22,"nodeType":"295","messageId":"296","endLine":277,"endColumn":35},{"ruleId":"293","severity":1,"message":"358","line":278,"column":24,"nodeType":"295","messageId":"296","endLine":278,"endColumn":39},{"ruleId":"293","severity":1,"message":"359","line":279,"column":29,"nodeType":"295","messageId":"296","endLine":279,"endColumn":49},{"ruleId":"293","severity":1,"message":"360","line":281,"column":17,"nodeType":"295","messageId":"296","endLine":281,"endColumn":25},{"ruleId":"293","severity":1,"message":"361","line":296,"column":28,"nodeType":"295","messageId":"296","endLine":296,"endColumn":47},{"ruleId":"293","severity":1,"message":"336","line":297,"column":10,"nodeType":"295","messageId":"296","endLine":297,"endColumn":19},{"ruleId":"293","severity":1,"message":"337","line":297,"column":21,"nodeType":"295","messageId":"296","endLine":297,"endColumn":33},{"ruleId":"293","severity":1,"message":"338","line":299,"column":26,"nodeType":"295","messageId":"296","endLine":299,"endColumn":43},{"ruleId":"311","severity":1,"message":"321","line":361,"column":15,"nodeType":"313","messageId":"314","endLine":361,"endColumn":17},{"ruleId":"293","severity":1,"message":"339","line":548,"column":9,"nodeType":"295","messageId":"296","endLine":548,"endColumn":21},{"ruleId":"303","severity":1,"message":"362","line":561,"column":6,"nodeType":"305","endLine":561,"endColumn":15,"suggestions":"366"},{"ruleId":"293","severity":1,"message":"364","line":563,"column":9,"nodeType":"295","messageId":"296","endLine":563,"endColumn":19},{"ruleId":"303","severity":1,"message":"367","line":568,"column":6,"nodeType":"305","endLine":568,"endColumn":17,"suggestions":"368"},{"ruleId":"289","replacedBy":"369"},{"ruleId":"291","replacedBy":"370"},{"ruleId":"293","severity":1,"message":"297","line":1,"column":16,"nodeType":"295","messageId":"296","endLine":1,"endColumn":26},{"ruleId":"293","severity":1,"message":"371","line":5,"column":8,"nodeType":"295","messageId":"296","endLine":5,"endColumn":20},{"ruleId":"293","severity":1,"message":"372","line":8,"column":8,"nodeType":"295","messageId":"296","endLine":8,"endColumn":10},{"ruleId":"293","severity":1,"message":"373","line":343,"column":10,"nodeType":"295","messageId":"296","endLine":343,"endColumn":21},{"ruleId":"293","severity":1,"message":"374","line":346,"column":22,"nodeType":"295","messageId":"296","endLine":346,"endColumn":35},{"ruleId":"293","severity":1,"message":"375","line":353,"column":10,"nodeType":"295","messageId":"296","endLine":353,"endColumn":19},{"ruleId":"293","severity":1,"message":"376","line":353,"column":21,"nodeType":"295","messageId":"296","endLine":353,"endColumn":33},{"ruleId":"293","severity":1,"message":"377","line":354,"column":10,"nodeType":"295","messageId":"296","endLine":354,"endColumn":16},{"ruleId":"293","severity":1,"message":"378","line":354,"column":18,"nodeType":"295","messageId":"296","endLine":354,"endColumn":27},{"ruleId":"293","severity":1,"message":"300","line":355,"column":10,"nodeType":"295","messageId":"296","endLine":355,"endColumn":18},{"ruleId":"293","severity":1,"message":"301","line":355,"column":20,"nodeType":"295","messageId":"296","endLine":355,"endColumn":31},{"ruleId":"293","severity":1,"message":"379","line":356,"column":10,"nodeType":"295","messageId":"296","endLine":356,"endColumn":15},{"ruleId":"293","severity":1,"message":"380","line":356,"column":17,"nodeType":"295","messageId":"296","endLine":356,"endColumn":25},{"ruleId":"293","severity":1,"message":"381","line":357,"column":10,"nodeType":"295","messageId":"296","endLine":357,"endColumn":15},{"ruleId":"293","severity":1,"message":"382","line":358,"column":18,"nodeType":"295","messageId":"296","endLine":358,"endColumn":27},{"ruleId":"293","severity":1,"message":"383","line":359,"column":10,"nodeType":"295","messageId":"296","endLine":359,"endColumn":17},{"ruleId":"293","severity":1,"message":"384","line":359,"column":19,"nodeType":"295","messageId":"296","endLine":359,"endColumn":29},{"ruleId":"293","severity":1,"message":"385","line":360,"column":10,"nodeType":"295","messageId":"296","endLine":360,"endColumn":22},{"ruleId":"293","severity":1,"message":"386","line":360,"column":24,"nodeType":"295","messageId":"296","endLine":360,"endColumn":39},{"ruleId":"293","severity":1,"message":"387","line":361,"column":10,"nodeType":"295","messageId":"296","endLine":361,"endColumn":18},{"ruleId":"293","severity":1,"message":"388","line":369,"column":27,"nodeType":"295","messageId":"296","endLine":369,"endColumn":45},{"ruleId":"293","severity":1,"message":"307","line":384,"column":9,"nodeType":"295","messageId":"296","endLine":384,"endColumn":20},{"ruleId":"293","severity":1,"message":"375","line":388,"column":9,"nodeType":"295","messageId":"296","endLine":388,"endColumn":18},{"ruleId":"303","severity":1,"message":"389","line":447,"column":6,"nodeType":"305","endLine":447,"endColumn":17,"suggestions":"390"},{"ruleId":"293","severity":1,"message":"317","line":449,"column":9,"nodeType":"295","messageId":"296","endLine":449,"endColumn":17},{"ruleId":"303","severity":1,"message":"318","line":459,"column":6,"nodeType":"305","endLine":459,"endColumn":14,"suggestions":"391"},{"ruleId":"293","severity":1,"message":"302","line":468,"column":9,"nodeType":"295","messageId":"296","endLine":468,"endColumn":10},{"ruleId":"303","severity":1,"message":"304","line":477,"column":6,"nodeType":"305","endLine":477,"endColumn":37,"suggestions":"392"},{"ruleId":"293","severity":1,"message":"393","line":520,"column":7,"nodeType":"295","messageId":"296","endLine":520,"endColumn":25},{"ruleId":"303","severity":1,"message":"394","line":525,"column":6,"nodeType":"295","endLine":525,"endColumn":16},{"ruleId":"303","severity":1,"message":"395","line":525,"column":6,"nodeType":"295","endLine":525,"endColumn":16,"suggestions":"396"},{"ruleId":"311","severity":1,"message":"312","line":548,"column":15,"nodeType":"313","messageId":"314","endLine":548,"endColumn":17},{"ruleId":"311","severity":1,"message":"321","line":560,"column":26,"nodeType":"313","messageId":"314","endLine":560,"endColumn":28},{"ruleId":"293","severity":1,"message":"397","line":599,"column":10,"nodeType":"295","messageId":"296","endLine":599,"endColumn":14},{"ruleId":"293","severity":1,"message":"398","line":599,"column":16,"nodeType":"295","messageId":"296","endLine":599,"endColumn":23},{"ruleId":"311","severity":1,"message":"321","line":611,"column":66,"nodeType":"313","messageId":"314","endLine":611,"endColumn":68},{"ruleId":"293","severity":1,"message":"399","line":720,"column":9,"nodeType":"295","messageId":"296","endLine":720,"endColumn":21},{"ruleId":"293","severity":1,"message":"400","line":735,"column":9,"nodeType":"295","messageId":"296","endLine":735,"endColumn":20},{"ruleId":"311","severity":1,"message":"321","line":742,"column":42,"nodeType":"313","messageId":"314","endLine":742,"endColumn":44},{"ruleId":"293","severity":1,"message":"401","line":819,"column":11,"nodeType":"295","messageId":"296","endLine":819,"endColumn":18},{"ruleId":"311","severity":1,"message":"321","line":870,"column":13,"nodeType":"313","messageId":"314","endLine":870,"endColumn":15},{"ruleId":"311","severity":1,"message":"321","line":882,"column":13,"nodeType":"313","messageId":"314","endLine":882,"endColumn":15},{"ruleId":"311","severity":1,"message":"321","line":928,"column":13,"nodeType":"313","messageId":"314","endLine":928,"endColumn":15},{"ruleId":"311","severity":1,"message":"321","line":938,"column":35,"nodeType":"313","messageId":"314","endLine":938,"endColumn":37},{"ruleId":"311","severity":1,"message":"321","line":939,"column":26,"nodeType":"313","messageId":"314","endLine":939,"endColumn":28},{"ruleId":"311","severity":1,"message":"321","line":1002,"column":36,"nodeType":"313","messageId":"314","endLine":1002,"endColumn":38},{"ruleId":"293","severity":1,"message":"402","line":1049,"column":9,"nodeType":"295","messageId":"296","endLine":1049,"endColumn":19},{"ruleId":"311","severity":1,"message":"312","line":1050,"column":22,"nodeType":"313","messageId":"314","endLine":1050,"endColumn":24},{"ruleId":"311","severity":1,"message":"321","line":1060,"column":21,"nodeType":"313","messageId":"314","endLine":1060,"endColumn":23},{"ruleId":"311","severity":1,"message":"312","line":1098,"column":24,"nodeType":"313","messageId":"314","endLine":1098,"endColumn":26},{"ruleId":"293","severity":1,"message":"403","line":1119,"column":18,"nodeType":"295","messageId":"296","endLine":1119,"endColumn":34},{"ruleId":"311","severity":1,"message":"321","line":1137,"column":35,"nodeType":"313","messageId":"314","endLine":1137,"endColumn":37},{"ruleId":"311","severity":1,"message":"321","line":1138,"column":26,"nodeType":"313","messageId":"314","endLine":1138,"endColumn":28},{"ruleId":"404","severity":1,"message":"405","line":1150,"column":12,"nodeType":"295","messageId":"406","endLine":1150,"endColumn":25},{"ruleId":"407","severity":1,"message":"408","line":1306,"column":3,"nodeType":"409","messageId":"410","endLine":1475,"endColumn":5},{"ruleId":"293","severity":1,"message":"331","line":144,"column":7,"nodeType":"295","messageId":"296","endLine":144,"endColumn":18},{"ruleId":"293","severity":1,"message":"300","line":360,"column":10,"nodeType":"295","messageId":"296","endLine":360,"endColumn":18},{"ruleId":"293","severity":1,"message":"301","line":360,"column":20,"nodeType":"295","messageId":"296","endLine":360,"endColumn":31},{"ruleId":"293","severity":1,"message":"387","line":366,"column":10,"nodeType":"295","messageId":"296","endLine":366,"endColumn":18},{"ruleId":"293","severity":1,"message":"302","line":376,"column":9,"nodeType":"295","messageId":"296","endLine":376,"endColumn":10},{"ruleId":"303","severity":1,"message":"304","line":385,"column":6,"nodeType":"305","endLine":385,"endColumn":37,"suggestions":"411"},{"ruleId":"293","severity":1,"message":"388","line":387,"column":27,"nodeType":"295","messageId":"296","endLine":387,"endColumn":45},{"ruleId":"293","severity":1,"message":"412","line":397,"column":22,"nodeType":"295","messageId":"296","endLine":397,"endColumn":35},{"ruleId":"293","severity":1,"message":"307","line":407,"column":9,"nodeType":"295","messageId":"296","endLine":407,"endColumn":20},{"ruleId":"311","severity":1,"message":"321","line":431,"column":37,"nodeType":"313","messageId":"314","endLine":431,"endColumn":39},{"ruleId":"303","severity":1,"message":"413","line":442,"column":6,"nodeType":"305","endLine":442,"endColumn":14,"suggestions":"414"},{"ruleId":"293","severity":1,"message":"310","line":444,"column":9,"nodeType":"295","messageId":"296","endLine":444,"endColumn":21},{"ruleId":"311","severity":1,"message":"312","line":447,"column":20,"nodeType":"313","messageId":"314","endLine":447,"endColumn":22},{"ruleId":"303","severity":1,"message":"415","line":456,"column":6,"nodeType":"305","endLine":456,"endColumn":15,"suggestions":"416"},{"ruleId":"293","severity":1,"message":"317","line":458,"column":9,"nodeType":"295","messageId":"296","endLine":458,"endColumn":17},{"ruleId":"303","severity":1,"message":"318","line":468,"column":6,"nodeType":"305","endLine":468,"endColumn":14,"suggestions":"417"},{"ruleId":"311","severity":1,"message":"321","line":547,"column":20,"nodeType":"313","messageId":"314","endLine":547,"endColumn":22},{"ruleId":"311","severity":1,"message":"321","line":551,"column":20,"nodeType":"313","messageId":"314","endLine":551,"endColumn":22},{"ruleId":"311","severity":1,"message":"321","line":557,"column":15,"nodeType":"313","messageId":"314","endLine":557,"endColumn":17},{"ruleId":"311","severity":1,"message":"321","line":561,"column":15,"nodeType":"313","messageId":"314","endLine":561,"endColumn":17},{"ruleId":"311","severity":1,"message":"321","line":564,"column":15,"nodeType":"313","messageId":"314","endLine":564,"endColumn":17},{"ruleId":"311","severity":1,"message":"321","line":568,"column":15,"nodeType":"313","messageId":"314","endLine":568,"endColumn":17},{"ruleId":"311","severity":1,"message":"321","line":572,"column":15,"nodeType":"313","messageId":"314","endLine":572,"endColumn":17},{"ruleId":"311","severity":1,"message":"321","line":575,"column":15,"nodeType":"313","messageId":"314","endLine":575,"endColumn":17},{"ruleId":"311","severity":1,"message":"321","line":624,"column":35,"nodeType":"313","messageId":"314","endLine":624,"endColumn":37},{"ruleId":"311","severity":1,"message":"312","line":628,"column":22,"nodeType":"313","messageId":"314","endLine":628,"endColumn":24},{"ruleId":"293","severity":1,"message":"418","line":682,"column":5,"nodeType":"295","messageId":"296","endLine":682,"endColumn":19},{"ruleId":"293","severity":1,"message":"419","line":735,"column":10,"nodeType":"295","messageId":"296","endLine":735,"endColumn":20},{"ruleId":"293","severity":1,"message":"420","line":735,"column":22,"nodeType":"295","messageId":"296","endLine":735,"endColumn":35},{"ruleId":"293","severity":1,"message":"421","line":736,"column":10,"nodeType":"295","messageId":"296","endLine":736,"endColumn":18},{"ruleId":"293","severity":1,"message":"422","line":736,"column":20,"nodeType":"295","messageId":"296","endLine":736,"endColumn":31},{"ruleId":"293","severity":1,"message":"423","line":760,"column":9,"nodeType":"295","messageId":"296","endLine":760,"endColumn":17},{"ruleId":"293","severity":1,"message":"424","line":761,"column":9,"nodeType":"295","messageId":"296","endLine":761,"endColumn":16},{"ruleId":"311","severity":1,"message":"321","line":765,"column":13,"nodeType":"313","messageId":"314","endLine":765,"endColumn":15},{"ruleId":"311","severity":1,"message":"321","line":806,"column":13,"nodeType":"313","messageId":"314","endLine":806,"endColumn":15},{"ruleId":"311","severity":1,"message":"321","line":820,"column":35,"nodeType":"313","messageId":"314","endLine":820,"endColumn":37},{"ruleId":"311","severity":1,"message":"321","line":822,"column":26,"nodeType":"313","messageId":"314","endLine":822,"endColumn":28},{"ruleId":"311","severity":1,"message":"312","line":1044,"column":14,"nodeType":"313","messageId":"314","endLine":1044,"endColumn":16},{"ruleId":"311","severity":1,"message":"321","line":1143,"column":24,"nodeType":"313","messageId":"314","endLine":1143,"endColumn":26},"no-native-reassign",["425"],"no-negated-in-lhs",["426"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'Algorithms' is defined but never used.","'TextInsert' is assigned a value but never used.","'nodeNext' is assigned a value but never used.","'setNodeNext' is assigned a value but never used.","'a' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'frameHeight', 'frameWidth', and 'nodeLink'. Either include them or remove the dependency array. Mutable values like 'holderRef.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["427"],"'createNodes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'changer', 'frameHeight', 'frameWidth', 'nodeID', 'nodeLink', 'nodeValue', 'nodeX', and 'nodeY'. Either include them or remove the dependency array. You can also do a functional update 'setNodeLink(n => ...)' if you only need 'nodeLink' in the 'setNodeLink' call.",["428"],"'updateValues' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'globalHeight', 'globalWidth', 'looper', 'nodeID', 'nodeLink.length', 'nodeX', and 'nodeY'. Either include them or remove the dependency array. You can also do a functional update 'setLooper(l => ...)' if you only need 'looper' in the 'setLooper' call.",["429"],"'setNexts' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'nodeLink'. Either include it or remove the dependency array.",["430"],"'fixPositions' is assigned a value but never used.","Expected '===' and instead saw '=='.","'newXY' is assigned a value but never used.","'newTemp' is defined but never used.","'useState' is defined but never used.","'SVGLineBackground' is assigned a value but never used.","'averageRef' is defined but never used.","'averagePadding' is defined but never used.","'keyframes' is defined but never used.","'NodeLineStyle' is assigned a value but never used.","'NodeLineStyleBackground' is assigned a value but never used.","'MinusButton' is assigned a value but never used.","'arrayRotation' is assigned a value but never used.","'setArrayRotation' is assigned a value but never used.","'arrayMovement' is assigned a value but never used.","'setArrayMovement' is assigned a value but never used.","'transform' is assigned a value but never used.","'setTransform' is assigned a value but never used.","'setArrayTransform' is assigned a value but never used.","'initialArray' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'arrayID', 'arrayLink', 'arrayValue', and 'positionLink'. Either include them or remove the dependency array. You can also do a functional update 'setArrayLink(a => ...)' if you only need 'arrayLink' in the 'setArrayLink' call.",["431"],"'run5times' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'arrayValue' and 'changer'. Either include them or remove the dependency array. You can also do a functional update 'setChanger(c => ...)' if you only need 'changer' in the 'setChanger' call.",["432"],"'changeArray' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'arrayLink', 'arrayPosition', 'handleUpdate', and 'indexToChange'. Either include them or remove the dependency array.",["433"],"'positionLink' is assigned a value but never used.","'setPositionLink' is assigned a value but never used.","'arrayPosition' is assigned a value but never used.","'setArrayPosition' is assigned a value but never used.","'indexToChange' is assigned a value but never used.","'setIndexToChange' is assigned a value but never used.","'shouldChange' is assigned a value but never used.","'setShouldChange' is assigned a value but never used.","'setForeground' is assigned a value but never used.","'setBackground' is assigned a value but never used.","'setElementState' is assigned a value but never used.","'setElementTextColour' is assigned a value but never used.","'setFound' is assigned a value but never used.","'setMovementIterator' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'arrayID', 'arrayLink', 'arrayValue', 'background', 'elementState', 'elementTextColour', and 'foreground'. Either include them or remove the dependency array. You can also do a functional update 'setArrayLink(a => ...)' if you only need 'arrayLink' in the 'setArrayLink' call.",["434"],"'run10times' is assigned a value but never used.",["435"],["436"],"React Hook useEffect has a missing dependency: 'changer'. Either include it or remove the dependency array. You can also do a functional update 'setChanger(c => ...)' if you only need 'changer' in the 'setChanger' call.",["437"],["425"],["426"],"'ArrayElement' is defined but never used.","'p5' is defined but never used.","'globalWidth' is assigned a value but never used.","'setDimensions' is assigned a value but never used.","'nodeValue' is assigned a value but never used.","'setNodeValue' is assigned a value but never used.","'nodeID' is assigned a value but never used.","'setNodeID' is assigned a value but never used.","'nodeX' is assigned a value but never used.","'setNodeX' is assigned a value but never used.","'nodeY' is assigned a value but never used.","'setLooper' is assigned a value but never used.","'changer' is assigned a value but never used.","'setChanger' is assigned a value but never used.","'matrixLoaded' is assigned a value but never used.","'setMatrixLoaded' is assigned a value but never used.","'nodesSet' is assigned a value but never used.","'setAdjacencyMatrix' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'frameHeight' and 'frameWidth'. Either include them or remove the dependency array.",["438"],["439"],["440"],"'centerNodeColourer' is assigned a value but never used.","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has a missing dependency: 'centerNode'. Either include it or remove the dependency array.",["441"],"'aniX' is assigned a value but never used.","'setAniX' is assigned a value but never used.","'closestLimit' is assigned a value but never used.","'secondLimit' is assigned a value but never used.","'currEnd' is assigned a value but never used.","'traversals' is assigned a value but never used.","'depthFirstSearch' is defined but never used.","no-redeclare","'windowResized' is already defined.","redeclared","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode",["442"],"'setCostMatrix' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'adjacencyMatrix', 'changer', 'frameHeight', 'frameWidth', 'nodeID', 'nodeLink', 'nodeValue', 'nodeX', and 'nodeY'. Either include them or remove the dependency array. You can also do a functional update 'setNodeLink(n => ...)' if you only need 'nodeLink' in the 'setNodeLink' call.",["443"],"React Hook useEffect has missing dependencies: 'globalHeight', 'globalWidth', 'looper', 'nodeID', 'nodeX', and 'nodeY'. Either include them or remove the dependency array. You can also do a functional update 'setLooper(l => ...)' if you only need 'looper' in the 'setLooper' call.",["444"],["445"],"'animationTimer' is assigned a value but never used.","'startValue' is assigned a value but never used.","'setStartValue' is assigned a value but never used.","'endValue' is assigned a value but never used.","'setEndValue' is assigned a value but never used.","'minValue' is assigned a value but never used.","'minNode' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"446","fix":"447"},{"desc":"448","fix":"449"},{"desc":"450","fix":"451"},{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},{"desc":"460","fix":"461"},{"desc":"456","fix":"462"},{"desc":"460","fix":"463"},{"desc":"464","fix":"465"},{"desc":"466","fix":"467"},{"desc":"452","fix":"468"},{"desc":"446","fix":"469"},{"desc":"470","fix":"471"},{"desc":"446","fix":"472"},{"desc":"473","fix":"474"},{"desc":"475","fix":"476"},{"desc":"452","fix":"477"},"Update the dependencies array to be: [frameHeight, frameWidth, isRendered, nodeLink]",{"range":"478","text":"479"},"Update the dependencies array to be: [changer, frameHeight, frameWidth, looper, nodeID, nodeLink, nodeValue, nodeX, nodeY]",{"range":"480","text":"481"},"Update the dependencies array to be: [changer, globalHeight, globalWidth, looper, nodeID, nodeLink.length, nodeX, nodeY]",{"range":"482","text":"483"},"Update the dependencies array to be: [looper, nodeLink]",{"range":"484","text":"485"},"Update the dependencies array to be: [arrayID, arrayLink, arrayValue, changer, positionLink]",{"range":"486","text":"487"},"Update the dependencies array to be: [arrayLink, arrayValue, changer]",{"range":"488","text":"489"},"Update the dependencies array to be: [arrayLink, arrayPosition, handleUpdate, indexToChange, shouldChange]",{"range":"490","text":"491"},"Update the dependencies array to be: [arrayID, arrayLink, arrayValue, background, changer, elementState, elementTextColour, foreground]",{"range":"492","text":"493"},{"range":"494","text":"489"},{"range":"495","text":"493"},"Update the dependencies array to be: [arrayLink, changer]",{"range":"496","text":"497"},"Update the dependencies array to be: [frameHeight, frameWidth, holderRef]",{"range":"498","text":"499"},{"range":"500","text":"485"},{"range":"501","text":"479"},"Update the dependencies array to be: [centerNode]",{"range":"502","text":"503"},{"range":"504","text":"479"},"Update the dependencies array to be: [adjacencyMatrix, changer, frameHeight, frameWidth, looper, nodeID, nodeLink, nodeValue, nodeX, nodeY]",{"range":"505","text":"506"},"Update the dependencies array to be: [changer, globalHeight, globalWidth, looper, nodeID, nodeX, nodeY]",{"range":"507","text":"508"},{"range":"509","text":"485"},[5544,5575],"[frameHeight, frameWidth, isRendered, nodeLink]",[5989,5997],"[changer, frameHeight, frameWidth, looper, nodeID, nodeLink, nodeValue, nodeX, nodeY]",[6362,6371],"[changer, globalHeight, globalWidth, looper, nodeID, nodeLink.length, nodeX, nodeY]",[6602,6610],"[looper, nodeLink]",[6043,6052],"[arrayID, arrayLink, arrayValue, changer, positionLink]",[6281,6292],"[arrayLink, arrayValue, changer]",[7013,7027],"[arrayLink, arrayPosition, handleUpdate, indexToChange, shouldChange]",[14083,14092],"[arrayID, arrayLink, arrayValue, background, changer, elementState, elementTextColour, foreground]",[14322,14333],[15726,15735],[15900,15911],"[arrayLink, changer]",[9665,9676],"[frameHeight, frameWidth, holderRef]",[9907,9915],[10462,10493],[11587,11597],"[centerNode]",[7834,7865],[9276,9284],"[adjacencyMatrix, changer, frameHeight, frameWidth, looper, nodeID, nodeLink, nodeValue, nodeX, nodeY]",[9610,9619],"[changer, globalHeight, globalWidth, looper, nodeID, nodeX, nodeY]",[9850,9858]]